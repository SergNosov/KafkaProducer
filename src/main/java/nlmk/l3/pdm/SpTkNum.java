/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.pdm;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SpTkNum extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -2694280755611461944L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SpTkNum\",\"namespace\":\"nlmk.l3.pdm\",\"fields\":[{\"name\":\"ts\",\"type\":\"string\"},{\"name\":\"op\",\"type\":{\"type\":\"enum\",\"name\":\"opEnum\",\"symbols\":[\"I\",\"U\",\"D\"]}},{\"name\":\"pk\",\"type\":{\"type\":\"record\",\"name\":\"Pk\",\"fields\":[{\"name\":\"systemCode\",\"type\":\"string\"},{\"name\":\"directoryId\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":\"string\"}]}},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"Data\",\"fields\":[{\"name\":\"specifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Spec\",\"fields\":[{\"name\":\"specCode\",\"type\":\"int\"},{\"name\":\"specName\",\"type\":\"string\"},{\"name\":\"specTypeCode\",\"type\":\"int\"},{\"name\":\"specValue\",\"type\":\"string\"},{\"name\":\"specMeasure\",\"type\":\"string\"}]}}}]}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<SpTkNum> ENCODER =
            new BinaryMessageEncoder<SpTkNum>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<SpTkNum> DECODER =
            new BinaryMessageDecoder<SpTkNum>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<SpTkNum> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<SpTkNum> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<SpTkNum> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<SpTkNum>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this SpTkNum to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a SpTkNum from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a SpTkNum instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static SpTkNum fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.CharSequence ts;
    private nlmk.l3.pdm.opEnum op;
    private nlmk.l3.pdm.Pk pk;
    private nlmk.l3.pdm.Data data;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public SpTkNum() {
    }

    /**
     * All-args constructor.
     * @param ts The new value for ts
     * @param op The new value for op
     * @param pk The new value for pk
     * @param data The new value for data
     */
    public SpTkNum(java.lang.CharSequence ts, nlmk.l3.pdm.opEnum op, nlmk.l3.pdm.Pk pk, nlmk.l3.pdm.Data data) {
        this.ts = ts;
        this.op = op;
        this.pk = pk;
        this.data = data;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return ts;
            case 1:
                return op;
            case 2:
                return pk;
            case 3:
                return data;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                ts = (java.lang.CharSequence) value$;
                break;
            case 1:
                op = (nlmk.l3.pdm.opEnum) value$;
                break;
            case 2:
                pk = (nlmk.l3.pdm.Pk) value$;
                break;
            case 3:
                data = (nlmk.l3.pdm.Data) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'ts' field.
     * @return The value of the 'ts' field.
     */
    public java.lang.CharSequence getTs() {
        return ts;
    }


    /**
     * Sets the value of the 'ts' field.
     * @param value the value to set.
     */
    public void setTs(java.lang.CharSequence value) {
        this.ts = value;
    }

    /**
     * Gets the value of the 'op' field.
     * @return The value of the 'op' field.
     */
    public nlmk.l3.pdm.opEnum getOp() {
        return op;
    }


    /**
     * Sets the value of the 'op' field.
     * @param value the value to set.
     */
    public void setOp(nlmk.l3.pdm.opEnum value) {
        this.op = value;
    }

    /**
     * Gets the value of the 'pk' field.
     * @return The value of the 'pk' field.
     */
    public nlmk.l3.pdm.Pk getPk() {
        return pk;
    }


    /**
     * Sets the value of the 'pk' field.
     * @param value the value to set.
     */
    public void setPk(nlmk.l3.pdm.Pk value) {
        this.pk = value;
    }

    /**
     * Gets the value of the 'data' field.
     * @return The value of the 'data' field.
     */
    public nlmk.l3.pdm.Data getData() {
        return data;
    }


    /**
     * Sets the value of the 'data' field.
     * @param value the value to set.
     */
    public void setData(nlmk.l3.pdm.Data value) {
        this.data = value;
    }

    /**
     * Creates a new SpTkNum RecordBuilder.
     * @return A new SpTkNum RecordBuilder
     */
    public static nlmk.l3.pdm.SpTkNum.Builder newBuilder() {
        return new nlmk.l3.pdm.SpTkNum.Builder();
    }

    /**
     * Creates a new SpTkNum RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new SpTkNum RecordBuilder
     */
    public static nlmk.l3.pdm.SpTkNum.Builder newBuilder(nlmk.l3.pdm.SpTkNum.Builder other) {
        if (other == null) {
            return new nlmk.l3.pdm.SpTkNum.Builder();
        } else {
            return new nlmk.l3.pdm.SpTkNum.Builder(other);
        }
    }

    /**
     * Creates a new SpTkNum RecordBuilder by copying an existing SpTkNum instance.
     * @param other The existing instance to copy.
     * @return A new SpTkNum RecordBuilder
     */
    public static nlmk.l3.pdm.SpTkNum.Builder newBuilder(nlmk.l3.pdm.SpTkNum other) {
        if (other == null) {
            return new nlmk.l3.pdm.SpTkNum.Builder();
        } else {
            return new nlmk.l3.pdm.SpTkNum.Builder(other);
        }
    }

    /**
     * RecordBuilder for SpTkNum instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SpTkNum>
            implements org.apache.avro.data.RecordBuilder<SpTkNum> {

        private java.lang.CharSequence ts;
        private nlmk.l3.pdm.opEnum op;
        private nlmk.l3.pdm.Pk pk;
        private nlmk.l3.pdm.Pk.Builder pkBuilder;
        private nlmk.l3.pdm.Data data;
        private nlmk.l3.pdm.Data.Builder dataBuilder;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(nlmk.l3.pdm.SpTkNum.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.ts)) {
                this.ts = data().deepCopy(fields()[0].schema(), other.ts);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.op)) {
                this.op = data().deepCopy(fields()[1].schema(), other.op);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.pk)) {
                this.pk = data().deepCopy(fields()[2].schema(), other.pk);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (other.hasPkBuilder()) {
                this.pkBuilder = nlmk.l3.pdm.Pk.newBuilder(other.getPkBuilder());
            }
            if (isValidValue(fields()[3], other.data)) {
                this.data = data().deepCopy(fields()[3].schema(), other.data);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (other.hasDataBuilder()) {
                this.dataBuilder = nlmk.l3.pdm.Data.newBuilder(other.getDataBuilder());
            }
        }

        /**
         * Creates a Builder by copying an existing SpTkNum instance
         * @param other The existing instance to copy.
         */
        private Builder(nlmk.l3.pdm.SpTkNum other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.ts)) {
                this.ts = data().deepCopy(fields()[0].schema(), other.ts);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.op)) {
                this.op = data().deepCopy(fields()[1].schema(), other.op);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.pk)) {
                this.pk = data().deepCopy(fields()[2].schema(), other.pk);
                fieldSetFlags()[2] = true;
            }
            this.pkBuilder = null;
            if (isValidValue(fields()[3], other.data)) {
                this.data = data().deepCopy(fields()[3].schema(), other.data);
                fieldSetFlags()[3] = true;
            }
            this.dataBuilder = null;
        }

        /**
         * Gets the value of the 'ts' field.
         * @return The value.
         */
        public java.lang.CharSequence getTs() {
            return ts;
        }


        /**
         * Sets the value of the 'ts' field.
         * @param value The value of 'ts'.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder setTs(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.ts = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'ts' field has been set.
         * @return True if the 'ts' field has been set, false otherwise.
         */
        public boolean hasTs() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'ts' field.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder clearTs() {
            ts = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'op' field.
         * @return The value.
         */
        public nlmk.l3.pdm.opEnum getOp() {
            return op;
        }


        /**
         * Sets the value of the 'op' field.
         * @param value The value of 'op'.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder setOp(nlmk.l3.pdm.opEnum value) {
            validate(fields()[1], value);
            this.op = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'op' field has been set.
         * @return True if the 'op' field has been set, false otherwise.
         */
        public boolean hasOp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'op' field.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder clearOp() {
            op = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'pk' field.
         * @return The value.
         */
        public nlmk.l3.pdm.Pk getPk() {
            return pk;
        }


        /**
         * Sets the value of the 'pk' field.
         * @param value The value of 'pk'.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder setPk(nlmk.l3.pdm.Pk value) {
            validate(fields()[2], value);
            this.pkBuilder = null;
            this.pk = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'pk' field has been set.
         * @return True if the 'pk' field has been set, false otherwise.
         */
        public boolean hasPk() {
            return fieldSetFlags()[2];
        }

        /**
         * Gets the Builder instance for the 'pk' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public nlmk.l3.pdm.Pk.Builder getPkBuilder() {
            if (pkBuilder == null) {
                if (hasPk()) {
                    setPkBuilder(nlmk.l3.pdm.Pk.newBuilder(pk));
                } else {
                    setPkBuilder(nlmk.l3.pdm.Pk.newBuilder());
                }
            }
            return pkBuilder;
        }

        /**
         * Sets the Builder instance for the 'pk' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public nlmk.l3.pdm.SpTkNum.Builder setPkBuilder(nlmk.l3.pdm.Pk.Builder value) {
            clearPk();
            pkBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'pk' field has an active Builder instance
         * @return True if the 'pk' field has an active Builder instance
         */
        public boolean hasPkBuilder() {
            return pkBuilder != null;
        }

        /**
         * Clears the value of the 'pk' field.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder clearPk() {
            pk = null;
            pkBuilder = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'data' field.
         * @return The value.
         */
        public nlmk.l3.pdm.Data getData() {
            return data;
        }


        /**
         * Sets the value of the 'data' field.
         * @param value The value of 'data'.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder setData(nlmk.l3.pdm.Data value) {
            validate(fields()[3], value);
            this.dataBuilder = null;
            this.data = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'data' field has been set.
         * @return True if the 'data' field has been set, false otherwise.
         */
        public boolean hasData() {
            return fieldSetFlags()[3];
        }

        /**
         * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public nlmk.l3.pdm.Data.Builder getDataBuilder() {
            if (dataBuilder == null) {
                if (hasData()) {
                    setDataBuilder(nlmk.l3.pdm.Data.newBuilder(data));
                } else {
                    setDataBuilder(nlmk.l3.pdm.Data.newBuilder());
                }
            }
            return dataBuilder;
        }

        /**
         * Sets the Builder instance for the 'data' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public nlmk.l3.pdm.SpTkNum.Builder setDataBuilder(nlmk.l3.pdm.Data.Builder value) {
            clearData();
            dataBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'data' field has an active Builder instance
         * @return True if the 'data' field has an active Builder instance
         */
        public boolean hasDataBuilder() {
            return dataBuilder != null;
        }

        /**
         * Clears the value of the 'data' field.
         * @return This builder.
         */
        public nlmk.l3.pdm.SpTkNum.Builder clearData() {
            data = null;
            dataBuilder = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public SpTkNum build() {
            try {
                SpTkNum record = new SpTkNum();
                record.ts = fieldSetFlags()[0] ? this.ts : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.op = fieldSetFlags()[1] ? this.op : (nlmk.l3.pdm.opEnum) defaultValue(fields()[1]);
                if (pkBuilder != null) {
                    try {
                        record.pk = this.pkBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("pk"));
                        throw e;
                    }
                } else {
                    record.pk = fieldSetFlags()[2] ? this.pk : (nlmk.l3.pdm.Pk) defaultValue(fields()[2]);
                }
                if (dataBuilder != null) {
                    try {
                        record.data = this.dataBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("data"));
                        throw e;
                    }
                } else {
                    record.data = fieldSetFlags()[3] ? this.data : (nlmk.l3.pdm.Data) defaultValue(fields()[3]);
                }
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<SpTkNum>
            WRITER$ = (org.apache.avro.io.DatumWriter<SpTkNum>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<SpTkNum>
            READER$ = (org.apache.avro.io.DatumReader<SpTkNum>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.ts);

        out.writeEnum(this.op.ordinal());

        this.pk.customEncode(out);

        this.data.customEncode(out);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.ts = in.readString(this.ts instanceof Utf8 ? (Utf8) this.ts : null);

            this.op = nlmk.l3.pdm.opEnum.values()[in.readEnum()];

            if (this.pk == null) {
                this.pk = new nlmk.l3.pdm.Pk();
            }
            this.pk.customDecode(in);

            if (this.data == null) {
                this.data = new nlmk.l3.pdm.Data();
            }
            this.data.customDecode(in);

        } else {
            for (int i = 0; i < 4; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.ts = in.readString(this.ts instanceof Utf8 ? (Utf8) this.ts : null);
                        break;

                    case 1:
                        this.op = nlmk.l3.pdm.opEnum.values()[in.readEnum()];
                        break;

                    case 2:
                        if (this.pk == null) {
                            this.pk = new nlmk.l3.pdm.Pk();
                        }
                        this.pk.customDecode(in);
                        break;

                    case 3:
                        if (this.data == null) {
                            this.data = new nlmk.l3.pdm.Data();
                        }
                        this.data.customDecode(in);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










