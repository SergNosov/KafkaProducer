/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.ccm.pgp;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordMechanical extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6784872309799789497L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordMechanical\",\"namespace\":\"nlmk.l3.ccm.pgp\",\"fields\":[{\"name\":\"testArrayId\",\"type\":[\"null\",\"int\"],\"doc\":\"Идентификатор испытательного массива\",\"default\":null},{\"name\":\"hnum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер испытуемой горячекатаной партии\",\"default\":null},{\"name\":\"protId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД протокола\",\"default\":null},{\"name\":\"protNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер протокола\",\"default\":null},{\"name\":\"sampleId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД пробы\",\"default\":null},{\"name\":\"probeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Наименование вида пробы\",\"default\":null},{\"name\":\"probeCode\",\"type\":[\"null\",\"int\"],\"doc\":\"Код вида пробы\",\"default\":null},{\"name\":\"sampleNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер пробы (образца)\",\"default\":null},{\"name\":\"signAnalysis\",\"type\":[\"null\",\"int\"],\"doc\":\"Признак испытаний\",\"default\":null},{\"name\":\"formationListId\",\"type\":[\"null\",\"string\"],\"doc\":\"ИД формировочной карточки\",\"default\":null},{\"name\":\"formationListNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер формировочной карточки\",\"default\":null},{\"name\":\"mechData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMechData\",\"fields\":[{\"name\":\"mechCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"mechName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"mechFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"mechValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"mechTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"mechMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<RecordMechanical> ENCODER =
            new BinaryMessageEncoder<RecordMechanical>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<RecordMechanical> DECODER =
            new BinaryMessageDecoder<RecordMechanical>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<RecordMechanical> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<RecordMechanical> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<RecordMechanical> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<RecordMechanical>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this RecordMechanical to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a RecordMechanical from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a RecordMechanical instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static RecordMechanical fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Идентификатор испытательного массива */
    private java.lang.Integer testArrayId;
    /** Номер испытуемой горячекатаной партии */
    private java.lang.Integer hnum;
    /** ИД протокола */
    private java.lang.Integer protId;
    /** Номер протокола */
    private java.lang.Integer protNum;
    /** ИД пробы */
    private java.lang.Integer sampleId;
    /** Наименование вида пробы */
    private java.lang.CharSequence probeName;
    /** Код вида пробы */
    private java.lang.Integer probeCode;
    /** Номер пробы (образца) */
    private java.lang.Integer sampleNum;
    /** Признак испытаний */
    private java.lang.Integer signAnalysis;
    /** ИД формировочной карточки */
    private java.lang.CharSequence formationListId;
    /** Номер формировочной карточки */
    private java.lang.Integer formationListNum;
    private java.util.List<nlmk.l3.ccm.pgp.RecordMechData> mechData;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public RecordMechanical() {
    }

    /**
     * All-args constructor.
     * @param testArrayId Идентификатор испытательного массива
     * @param hnum Номер испытуемой горячекатаной партии
     * @param protId ИД протокола
     * @param protNum Номер протокола
     * @param sampleId ИД пробы
     * @param probeName Наименование вида пробы
     * @param probeCode Код вида пробы
     * @param sampleNum Номер пробы (образца)
     * @param signAnalysis Признак испытаний
     * @param formationListId ИД формировочной карточки
     * @param formationListNum Номер формировочной карточки
     * @param mechData The new value for mechData
     */
    public RecordMechanical(java.lang.Integer testArrayId, java.lang.Integer hnum, java.lang.Integer protId, java.lang.Integer protNum, java.lang.Integer sampleId, java.lang.CharSequence probeName, java.lang.Integer probeCode, java.lang.Integer sampleNum, java.lang.Integer signAnalysis, java.lang.CharSequence formationListId, java.lang.Integer formationListNum, java.util.List<nlmk.l3.ccm.pgp.RecordMechData> mechData) {
        this.testArrayId = testArrayId;
        this.hnum = hnum;
        this.protId = protId;
        this.protNum = protNum;
        this.sampleId = sampleId;
        this.probeName = probeName;
        this.probeCode = probeCode;
        this.sampleNum = sampleNum;
        this.signAnalysis = signAnalysis;
        this.formationListId = formationListId;
        this.formationListNum = formationListNum;
        this.mechData = mechData;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return testArrayId;
            case 1:
                return hnum;
            case 2:
                return protId;
            case 3:
                return protNum;
            case 4:
                return sampleId;
            case 5:
                return probeName;
            case 6:
                return probeCode;
            case 7:
                return sampleNum;
            case 8:
                return signAnalysis;
            case 9:
                return formationListId;
            case 10:
                return formationListNum;
            case 11:
                return mechData;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                testArrayId = (java.lang.Integer) value$;
                break;
            case 1:
                hnum = (java.lang.Integer) value$;
                break;
            case 2:
                protId = (java.lang.Integer) value$;
                break;
            case 3:
                protNum = (java.lang.Integer) value$;
                break;
            case 4:
                sampleId = (java.lang.Integer) value$;
                break;
            case 5:
                probeName = (java.lang.CharSequence) value$;
                break;
            case 6:
                probeCode = (java.lang.Integer) value$;
                break;
            case 7:
                sampleNum = (java.lang.Integer) value$;
                break;
            case 8:
                signAnalysis = (java.lang.Integer) value$;
                break;
            case 9:
                formationListId = (java.lang.CharSequence) value$;
                break;
            case 10:
                formationListNum = (java.lang.Integer) value$;
                break;
            case 11:
                mechData = (java.util.List<nlmk.l3.ccm.pgp.RecordMechData>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'testArrayId' field.
     * @return Идентификатор испытательного массива
     */
    public java.lang.Integer getTestArrayId() {
        return testArrayId;
    }


    /**
     * Sets the value of the 'testArrayId' field.
     * Идентификатор испытательного массива
     * @param value the value to set.
     */
    public void setTestArrayId(java.lang.Integer value) {
        this.testArrayId = value;
    }

    /**
     * Gets the value of the 'hnum' field.
     * @return Номер испытуемой горячекатаной партии
     */
    public java.lang.Integer getHnum() {
        return hnum;
    }


    /**
     * Sets the value of the 'hnum' field.
     * Номер испытуемой горячекатаной партии
     * @param value the value to set.
     */
    public void setHnum(java.lang.Integer value) {
        this.hnum = value;
    }

    /**
     * Gets the value of the 'protId' field.
     * @return ИД протокола
     */
    public java.lang.Integer getProtId() {
        return protId;
    }


    /**
     * Sets the value of the 'protId' field.
     * ИД протокола
     * @param value the value to set.
     */
    public void setProtId(java.lang.Integer value) {
        this.protId = value;
    }

    /**
     * Gets the value of the 'protNum' field.
     * @return Номер протокола
     */
    public java.lang.Integer getProtNum() {
        return protNum;
    }


    /**
     * Sets the value of the 'protNum' field.
     * Номер протокола
     * @param value the value to set.
     */
    public void setProtNum(java.lang.Integer value) {
        this.protNum = value;
    }

    /**
     * Gets the value of the 'sampleId' field.
     * @return ИД пробы
     */
    public java.lang.Integer getSampleId() {
        return sampleId;
    }


    /**
     * Sets the value of the 'sampleId' field.
     * ИД пробы
     * @param value the value to set.
     */
    public void setSampleId(java.lang.Integer value) {
        this.sampleId = value;
    }

    /**
     * Gets the value of the 'probeName' field.
     * @return Наименование вида пробы
     */
    public java.lang.CharSequence getProbeName() {
        return probeName;
    }


    /**
     * Sets the value of the 'probeName' field.
     * Наименование вида пробы
     * @param value the value to set.
     */
    public void setProbeName(java.lang.CharSequence value) {
        this.probeName = value;
    }

    /**
     * Gets the value of the 'probeCode' field.
     * @return Код вида пробы
     */
    public java.lang.Integer getProbeCode() {
        return probeCode;
    }


    /**
     * Sets the value of the 'probeCode' field.
     * Код вида пробы
     * @param value the value to set.
     */
    public void setProbeCode(java.lang.Integer value) {
        this.probeCode = value;
    }

    /**
     * Gets the value of the 'sampleNum' field.
     * @return Номер пробы (образца)
     */
    public java.lang.Integer getSampleNum() {
        return sampleNum;
    }


    /**
     * Sets the value of the 'sampleNum' field.
     * Номер пробы (образца)
     * @param value the value to set.
     */
    public void setSampleNum(java.lang.Integer value) {
        this.sampleNum = value;
    }

    /**
     * Gets the value of the 'signAnalysis' field.
     * @return Признак испытаний
     */
    public java.lang.Integer getSignAnalysis() {
        return signAnalysis;
    }


    /**
     * Sets the value of the 'signAnalysis' field.
     * Признак испытаний
     * @param value the value to set.
     */
    public void setSignAnalysis(java.lang.Integer value) {
        this.signAnalysis = value;
    }

    /**
     * Gets the value of the 'formationListId' field.
     * @return ИД формировочной карточки
     */
    public java.lang.CharSequence getFormationListId() {
        return formationListId;
    }


    /**
     * Sets the value of the 'formationListId' field.
     * ИД формировочной карточки
     * @param value the value to set.
     */
    public void setFormationListId(java.lang.CharSequence value) {
        this.formationListId = value;
    }

    /**
     * Gets the value of the 'formationListNum' field.
     * @return Номер формировочной карточки
     */
    public java.lang.Integer getFormationListNum() {
        return formationListNum;
    }


    /**
     * Sets the value of the 'formationListNum' field.
     * Номер формировочной карточки
     * @param value the value to set.
     */
    public void setFormationListNum(java.lang.Integer value) {
        this.formationListNum = value;
    }

    /**
     * Gets the value of the 'mechData' field.
     * @return The value of the 'mechData' field.
     */
    public java.util.List<nlmk.l3.ccm.pgp.RecordMechData> getMechData() {
        return mechData;
    }


    /**
     * Sets the value of the 'mechData' field.
     * @param value the value to set.
     */
    public void setMechData(java.util.List<nlmk.l3.ccm.pgp.RecordMechData> value) {
        this.mechData = value;
    }

    /**
     * Creates a new RecordMechanical RecordBuilder.
     * @return A new RecordMechanical RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.RecordMechanical.Builder newBuilder() {
        return new nlmk.l3.ccm.pgp.RecordMechanical.Builder();
    }

    /**
     * Creates a new RecordMechanical RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new RecordMechanical RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.RecordMechanical.Builder newBuilder(nlmk.l3.ccm.pgp.RecordMechanical.Builder other) {
        if (other == null) {
            return new nlmk.l3.ccm.pgp.RecordMechanical.Builder();
        } else {
            return new nlmk.l3.ccm.pgp.RecordMechanical.Builder(other);
        }
    }

    /**
     * Creates a new RecordMechanical RecordBuilder by copying an existing RecordMechanical instance.
     * @param other The existing instance to copy.
     * @return A new RecordMechanical RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.RecordMechanical.Builder newBuilder(nlmk.l3.ccm.pgp.RecordMechanical other) {
        if (other == null) {
            return new nlmk.l3.ccm.pgp.RecordMechanical.Builder();
        } else {
            return new nlmk.l3.ccm.pgp.RecordMechanical.Builder(other);
        }
    }

    /**
     * RecordBuilder for RecordMechanical instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordMechanical>
            implements org.apache.avro.data.RecordBuilder<RecordMechanical> {

        /** Идентификатор испытательного массива */
        private java.lang.Integer testArrayId;
        /** Номер испытуемой горячекатаной партии */
        private java.lang.Integer hnum;
        /** ИД протокола */
        private java.lang.Integer protId;
        /** Номер протокола */
        private java.lang.Integer protNum;
        /** ИД пробы */
        private java.lang.Integer sampleId;
        /** Наименование вида пробы */
        private java.lang.CharSequence probeName;
        /** Код вида пробы */
        private java.lang.Integer probeCode;
        /** Номер пробы (образца) */
        private java.lang.Integer sampleNum;
        /** Признак испытаний */
        private java.lang.Integer signAnalysis;
        /** ИД формировочной карточки */
        private java.lang.CharSequence formationListId;
        /** Номер формировочной карточки */
        private java.lang.Integer formationListNum;
        private java.util.List<nlmk.l3.ccm.pgp.RecordMechData> mechData;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(nlmk.l3.ccm.pgp.RecordMechanical.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.testArrayId)) {
                this.testArrayId = data().deepCopy(fields()[0].schema(), other.testArrayId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.hnum)) {
                this.hnum = data().deepCopy(fields()[1].schema(), other.hnum);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.protId)) {
                this.protId = data().deepCopy(fields()[2].schema(), other.protId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.protNum)) {
                this.protNum = data().deepCopy(fields()[3].schema(), other.protNum);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.sampleId)) {
                this.sampleId = data().deepCopy(fields()[4].schema(), other.sampleId);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.probeName)) {
                this.probeName = data().deepCopy(fields()[5].schema(), other.probeName);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.probeCode)) {
                this.probeCode = data().deepCopy(fields()[6].schema(), other.probeCode);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.sampleNum)) {
                this.sampleNum = data().deepCopy(fields()[7].schema(), other.sampleNum);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.signAnalysis)) {
                this.signAnalysis = data().deepCopy(fields()[8].schema(), other.signAnalysis);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.formationListId)) {
                this.formationListId = data().deepCopy(fields()[9].schema(), other.formationListId);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.formationListNum)) {
                this.formationListNum = data().deepCopy(fields()[10].schema(), other.formationListNum);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.mechData)) {
                this.mechData = data().deepCopy(fields()[11].schema(), other.mechData);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
        }

        /**
         * Creates a Builder by copying an existing RecordMechanical instance
         * @param other The existing instance to copy.
         */
        private Builder(nlmk.l3.ccm.pgp.RecordMechanical other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.testArrayId)) {
                this.testArrayId = data().deepCopy(fields()[0].schema(), other.testArrayId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.hnum)) {
                this.hnum = data().deepCopy(fields()[1].schema(), other.hnum);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.protId)) {
                this.protId = data().deepCopy(fields()[2].schema(), other.protId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.protNum)) {
                this.protNum = data().deepCopy(fields()[3].schema(), other.protNum);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.sampleId)) {
                this.sampleId = data().deepCopy(fields()[4].schema(), other.sampleId);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.probeName)) {
                this.probeName = data().deepCopy(fields()[5].schema(), other.probeName);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.probeCode)) {
                this.probeCode = data().deepCopy(fields()[6].schema(), other.probeCode);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.sampleNum)) {
                this.sampleNum = data().deepCopy(fields()[7].schema(), other.sampleNum);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.signAnalysis)) {
                this.signAnalysis = data().deepCopy(fields()[8].schema(), other.signAnalysis);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.formationListId)) {
                this.formationListId = data().deepCopy(fields()[9].schema(), other.formationListId);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.formationListNum)) {
                this.formationListNum = data().deepCopy(fields()[10].schema(), other.formationListNum);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.mechData)) {
                this.mechData = data().deepCopy(fields()[11].schema(), other.mechData);
                fieldSetFlags()[11] = true;
            }
        }

        /**
         * Gets the value of the 'testArrayId' field.
         * Идентификатор испытательного массива
         * @return The value.
         */
        public java.lang.Integer getTestArrayId() {
            return testArrayId;
        }


        /**
         * Sets the value of the 'testArrayId' field.
         * Идентификатор испытательного массива
         * @param value The value of 'testArrayId'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setTestArrayId(java.lang.Integer value) {
            validate(fields()[0], value);
            this.testArrayId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'testArrayId' field has been set.
         * Идентификатор испытательного массива
         * @return True if the 'testArrayId' field has been set, false otherwise.
         */
        public boolean hasTestArrayId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'testArrayId' field.
         * Идентификатор испытательного массива
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearTestArrayId() {
            testArrayId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'hnum' field.
         * Номер испытуемой горячекатаной партии
         * @return The value.
         */
        public java.lang.Integer getHnum() {
            return hnum;
        }


        /**
         * Sets the value of the 'hnum' field.
         * Номер испытуемой горячекатаной партии
         * @param value The value of 'hnum'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setHnum(java.lang.Integer value) {
            validate(fields()[1], value);
            this.hnum = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'hnum' field has been set.
         * Номер испытуемой горячекатаной партии
         * @return True if the 'hnum' field has been set, false otherwise.
         */
        public boolean hasHnum() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'hnum' field.
         * Номер испытуемой горячекатаной партии
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearHnum() {
            hnum = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'protId' field.
         * ИД протокола
         * @return The value.
         */
        public java.lang.Integer getProtId() {
            return protId;
        }


        /**
         * Sets the value of the 'protId' field.
         * ИД протокола
         * @param value The value of 'protId'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setProtId(java.lang.Integer value) {
            validate(fields()[2], value);
            this.protId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'protId' field has been set.
         * ИД протокола
         * @return True if the 'protId' field has been set, false otherwise.
         */
        public boolean hasProtId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'protId' field.
         * ИД протокола
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearProtId() {
            protId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'protNum' field.
         * Номер протокола
         * @return The value.
         */
        public java.lang.Integer getProtNum() {
            return protNum;
        }


        /**
         * Sets the value of the 'protNum' field.
         * Номер протокола
         * @param value The value of 'protNum'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setProtNum(java.lang.Integer value) {
            validate(fields()[3], value);
            this.protNum = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'protNum' field has been set.
         * Номер протокола
         * @return True if the 'protNum' field has been set, false otherwise.
         */
        public boolean hasProtNum() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'protNum' field.
         * Номер протокола
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearProtNum() {
            protNum = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'sampleId' field.
         * ИД пробы
         * @return The value.
         */
        public java.lang.Integer getSampleId() {
            return sampleId;
        }


        /**
         * Sets the value of the 'sampleId' field.
         * ИД пробы
         * @param value The value of 'sampleId'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setSampleId(java.lang.Integer value) {
            validate(fields()[4], value);
            this.sampleId = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'sampleId' field has been set.
         * ИД пробы
         * @return True if the 'sampleId' field has been set, false otherwise.
         */
        public boolean hasSampleId() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'sampleId' field.
         * ИД пробы
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearSampleId() {
            sampleId = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'probeName' field.
         * Наименование вида пробы
         * @return The value.
         */
        public java.lang.CharSequence getProbeName() {
            return probeName;
        }


        /**
         * Sets the value of the 'probeName' field.
         * Наименование вида пробы
         * @param value The value of 'probeName'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setProbeName(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.probeName = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'probeName' field has been set.
         * Наименование вида пробы
         * @return True if the 'probeName' field has been set, false otherwise.
         */
        public boolean hasProbeName() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'probeName' field.
         * Наименование вида пробы
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearProbeName() {
            probeName = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'probeCode' field.
         * Код вида пробы
         * @return The value.
         */
        public java.lang.Integer getProbeCode() {
            return probeCode;
        }


        /**
         * Sets the value of the 'probeCode' field.
         * Код вида пробы
         * @param value The value of 'probeCode'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setProbeCode(java.lang.Integer value) {
            validate(fields()[6], value);
            this.probeCode = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'probeCode' field has been set.
         * Код вида пробы
         * @return True if the 'probeCode' field has been set, false otherwise.
         */
        public boolean hasProbeCode() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'probeCode' field.
         * Код вида пробы
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearProbeCode() {
            probeCode = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'sampleNum' field.
         * Номер пробы (образца)
         * @return The value.
         */
        public java.lang.Integer getSampleNum() {
            return sampleNum;
        }


        /**
         * Sets the value of the 'sampleNum' field.
         * Номер пробы (образца)
         * @param value The value of 'sampleNum'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setSampleNum(java.lang.Integer value) {
            validate(fields()[7], value);
            this.sampleNum = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'sampleNum' field has been set.
         * Номер пробы (образца)
         * @return True if the 'sampleNum' field has been set, false otherwise.
         */
        public boolean hasSampleNum() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'sampleNum' field.
         * Номер пробы (образца)
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearSampleNum() {
            sampleNum = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'signAnalysis' field.
         * Признак испытаний
         * @return The value.
         */
        public java.lang.Integer getSignAnalysis() {
            return signAnalysis;
        }


        /**
         * Sets the value of the 'signAnalysis' field.
         * Признак испытаний
         * @param value The value of 'signAnalysis'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setSignAnalysis(java.lang.Integer value) {
            validate(fields()[8], value);
            this.signAnalysis = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'signAnalysis' field has been set.
         * Признак испытаний
         * @return True if the 'signAnalysis' field has been set, false otherwise.
         */
        public boolean hasSignAnalysis() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'signAnalysis' field.
         * Признак испытаний
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearSignAnalysis() {
            signAnalysis = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'formationListId' field.
         * ИД формировочной карточки
         * @return The value.
         */
        public java.lang.CharSequence getFormationListId() {
            return formationListId;
        }


        /**
         * Sets the value of the 'formationListId' field.
         * ИД формировочной карточки
         * @param value The value of 'formationListId'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setFormationListId(java.lang.CharSequence value) {
            validate(fields()[9], value);
            this.formationListId = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'formationListId' field has been set.
         * ИД формировочной карточки
         * @return True if the 'formationListId' field has been set, false otherwise.
         */
        public boolean hasFormationListId() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'formationListId' field.
         * ИД формировочной карточки
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearFormationListId() {
            formationListId = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'formationListNum' field.
         * Номер формировочной карточки
         * @return The value.
         */
        public java.lang.Integer getFormationListNum() {
            return formationListNum;
        }


        /**
         * Sets the value of the 'formationListNum' field.
         * Номер формировочной карточки
         * @param value The value of 'formationListNum'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setFormationListNum(java.lang.Integer value) {
            validate(fields()[10], value);
            this.formationListNum = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'formationListNum' field has been set.
         * Номер формировочной карточки
         * @return True if the 'formationListNum' field has been set, false otherwise.
         */
        public boolean hasFormationListNum() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'formationListNum' field.
         * Номер формировочной карточки
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearFormationListNum() {
            formationListNum = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'mechData' field.
         * @return The value.
         */
        public java.util.List<nlmk.l3.ccm.pgp.RecordMechData> getMechData() {
            return mechData;
        }


        /**
         * Sets the value of the 'mechData' field.
         * @param value The value of 'mechData'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder setMechData(java.util.List<nlmk.l3.ccm.pgp.RecordMechData> value) {
            validate(fields()[11], value);
            this.mechData = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'mechData' field has been set.
         * @return True if the 'mechData' field has been set, false otherwise.
         */
        public boolean hasMechData() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'mechData' field.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordMechanical.Builder clearMechData() {
            mechData = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public RecordMechanical build() {
            try {
                RecordMechanical record = new RecordMechanical();
                record.testArrayId = fieldSetFlags()[0] ? this.testArrayId : (java.lang.Integer) defaultValue(fields()[0]);
                record.hnum = fieldSetFlags()[1] ? this.hnum : (java.lang.Integer) defaultValue(fields()[1]);
                record.protId = fieldSetFlags()[2] ? this.protId : (java.lang.Integer) defaultValue(fields()[2]);
                record.protNum = fieldSetFlags()[3] ? this.protNum : (java.lang.Integer) defaultValue(fields()[3]);
                record.sampleId = fieldSetFlags()[4] ? this.sampleId : (java.lang.Integer) defaultValue(fields()[4]);
                record.probeName = fieldSetFlags()[5] ? this.probeName : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.probeCode = fieldSetFlags()[6] ? this.probeCode : (java.lang.Integer) defaultValue(fields()[6]);
                record.sampleNum = fieldSetFlags()[7] ? this.sampleNum : (java.lang.Integer) defaultValue(fields()[7]);
                record.signAnalysis = fieldSetFlags()[8] ? this.signAnalysis : (java.lang.Integer) defaultValue(fields()[8]);
                record.formationListId = fieldSetFlags()[9] ? this.formationListId : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.formationListNum = fieldSetFlags()[10] ? this.formationListNum : (java.lang.Integer) defaultValue(fields()[10]);
                record.mechData = fieldSetFlags()[11] ? this.mechData : (java.util.List<nlmk.l3.ccm.pgp.RecordMechData>) defaultValue(fields()[11]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<RecordMechanical>
            WRITER$ = (org.apache.avro.io.DatumWriter<RecordMechanical>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<RecordMechanical>
            READER$ = (org.apache.avro.io.DatumReader<RecordMechanical>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        if (this.testArrayId == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.testArrayId);
        }

        if (this.hnum == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.hnum);
        }

        if (this.protId == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.protId);
        }

        if (this.protNum == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.protNum);
        }

        if (this.sampleId == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.sampleId);
        }

        if (this.probeName == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.probeName);
        }

        if (this.probeCode == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.probeCode);
        }

        if (this.sampleNum == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.sampleNum);
        }

        if (this.signAnalysis == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.signAnalysis);
        }

        if (this.formationListId == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.formationListId);
        }

        if (this.formationListNum == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.formationListNum);
        }

        long size0 = this.mechData.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (nlmk.l3.ccm.pgp.RecordMechData e0 : this.mechData) {
            actualSize0++;
            out.startItem();
            e0.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            if (in.readIndex() != 1) {
                in.readNull();
                this.testArrayId = null;
            } else {
                this.testArrayId = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.hnum = null;
            } else {
                this.hnum = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.protId = null;
            } else {
                this.protId = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.protNum = null;
            } else {
                this.protNum = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.sampleId = null;
            } else {
                this.sampleId = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.probeName = null;
            } else {
                this.probeName = in.readString(this.probeName instanceof Utf8 ? (Utf8) this.probeName : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.probeCode = null;
            } else {
                this.probeCode = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.sampleNum = null;
            } else {
                this.sampleNum = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.signAnalysis = null;
            } else {
                this.signAnalysis = in.readInt();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.formationListId = null;
            } else {
                this.formationListId = in.readString(this.formationListId instanceof Utf8 ? (Utf8) this.formationListId : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.formationListNum = null;
            } else {
                this.formationListNum = in.readInt();
            }

            long size0 = in.readArrayStart();
            java.util.List<nlmk.l3.ccm.pgp.RecordMechData> a0 = this.mechData;
            if (a0 == null) {
                a0 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechData>((int) size0, SCHEMA$.getField("mechData").schema());
                this.mechData = a0;
            } else a0.clear();
            SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechData>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    nlmk.l3.ccm.pgp.RecordMechData e0 = (ga0 != null ? ga0.peek() : null);
                    if (e0 == null) {
                        e0 = new nlmk.l3.ccm.pgp.RecordMechData();
                    }
                    e0.customDecode(in);
                    a0.add(e0);
                }
            }

        } else {
            for (int i = 0; i < 12; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.testArrayId = null;
                        } else {
                            this.testArrayId = in.readInt();
                        }
                        break;

                    case 1:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.hnum = null;
                        } else {
                            this.hnum = in.readInt();
                        }
                        break;

                    case 2:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.protId = null;
                        } else {
                            this.protId = in.readInt();
                        }
                        break;

                    case 3:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.protNum = null;
                        } else {
                            this.protNum = in.readInt();
                        }
                        break;

                    case 4:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sampleId = null;
                        } else {
                            this.sampleId = in.readInt();
                        }
                        break;

                    case 5:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.probeName = null;
                        } else {
                            this.probeName = in.readString(this.probeName instanceof Utf8 ? (Utf8) this.probeName : null);
                        }
                        break;

                    case 6:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.probeCode = null;
                        } else {
                            this.probeCode = in.readInt();
                        }
                        break;

                    case 7:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sampleNum = null;
                        } else {
                            this.sampleNum = in.readInt();
                        }
                        break;

                    case 8:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.signAnalysis = null;
                        } else {
                            this.signAnalysis = in.readInt();
                        }
                        break;

                    case 9:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.formationListId = null;
                        } else {
                            this.formationListId = in.readString(this.formationListId instanceof Utf8 ? (Utf8) this.formationListId : null);
                        }
                        break;

                    case 10:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.formationListNum = null;
                        } else {
                            this.formationListNum = in.readInt();
                        }
                        break;

                    case 11:
                        long size0 = in.readArrayStart();
                        java.util.List<nlmk.l3.ccm.pgp.RecordMechData> a0 = this.mechData;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechData>((int) size0, SCHEMA$.getField("mechData").schema());
                            this.mechData = a0;
                        } else a0.clear();
                        SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechData>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                nlmk.l3.ccm.pgp.RecordMechData e0 = (ga0 != null ? ga0.peek() : null);
                                if (e0 == null) {
                                    e0 = new nlmk.l3.ccm.pgp.RecordMechData();
                                }
                                e0.customDecode(in);
                                a0.add(e0);
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










