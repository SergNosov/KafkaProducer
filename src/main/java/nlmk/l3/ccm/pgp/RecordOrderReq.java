/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.ccm.pgp;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordOrderReq extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 2075207393465165571L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordOrderReq\",\"namespace\":\"nlmk.l3.ccm.pgp\",\"fields\":[{\"name\":\"attrCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"attrName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"attrValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"attrTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"attrTypeValue\",\"type\":\"int\",\"doc\":\"Тип значения (1 - простое, 2 - перечисленное)\"},{\"name\":\"attrFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"attrMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null},{\"name\":\"listValues\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordListValues\",\"fields\":[{\"name\":\"value\",\"type\":\"string\",\"doc\":\"Значение из списка\"}]}}],\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<RecordOrderReq> ENCODER =
            new BinaryMessageEncoder<RecordOrderReq>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<RecordOrderReq> DECODER =
            new BinaryMessageDecoder<RecordOrderReq>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<RecordOrderReq> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<RecordOrderReq> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<RecordOrderReq> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<RecordOrderReq>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this RecordOrderReq to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a RecordOrderReq from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a RecordOrderReq instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static RecordOrderReq fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Код характеристики */
    private int attrCode;
    /** Наименование характеристики */
    private java.lang.CharSequence attrName;
    /** Значение характеристики */
    private java.lang.CharSequence attrValue;
    /** Тип данных (1 - строка, 2 - число, 3 - дата) */
    private int attrTypeCode;
    /** Тип значения (1 - простое, 2 - перечисленное) */
    private int attrTypeValue;
    /** Формат передачи характеристики */
    private java.lang.CharSequence attrFormat;
    /** Единица измерения характеристики */
    private java.lang.CharSequence attrMeasure;
    private java.util.List<nlmk.l3.ccm.pgp.RecordListValues> listValues;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public RecordOrderReq() {
    }

    /**
     * All-args constructor.
     * @param attrCode Код характеристики
     * @param attrName Наименование характеристики
     * @param attrValue Значение характеристики
     * @param attrTypeCode Тип данных (1 - строка, 2 - число, 3 - дата)
     * @param attrTypeValue Тип значения (1 - простое, 2 - перечисленное)
     * @param attrFormat Формат передачи характеристики
     * @param attrMeasure Единица измерения характеристики
     * @param listValues The new value for listValues
     */
    public RecordOrderReq(java.lang.Integer attrCode, java.lang.CharSequence attrName, java.lang.CharSequence attrValue, java.lang.Integer attrTypeCode, java.lang.Integer attrTypeValue, java.lang.CharSequence attrFormat, java.lang.CharSequence attrMeasure, java.util.List<nlmk.l3.ccm.pgp.RecordListValues> listValues) {
        this.attrCode = attrCode;
        this.attrName = attrName;
        this.attrValue = attrValue;
        this.attrTypeCode = attrTypeCode;
        this.attrTypeValue = attrTypeValue;
        this.attrFormat = attrFormat;
        this.attrMeasure = attrMeasure;
        this.listValues = listValues;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return attrCode;
            case 1:
                return attrName;
            case 2:
                return attrValue;
            case 3:
                return attrTypeCode;
            case 4:
                return attrTypeValue;
            case 5:
                return attrFormat;
            case 6:
                return attrMeasure;
            case 7:
                return listValues;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                attrCode = (java.lang.Integer) value$;
                break;
            case 1:
                attrName = (java.lang.CharSequence) value$;
                break;
            case 2:
                attrValue = (java.lang.CharSequence) value$;
                break;
            case 3:
                attrTypeCode = (java.lang.Integer) value$;
                break;
            case 4:
                attrTypeValue = (java.lang.Integer) value$;
                break;
            case 5:
                attrFormat = (java.lang.CharSequence) value$;
                break;
            case 6:
                attrMeasure = (java.lang.CharSequence) value$;
                break;
            case 7:
                listValues = (java.util.List<nlmk.l3.ccm.pgp.RecordListValues>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'attrCode' field.
     * @return Код характеристики
     */
    public int getAttrCode() {
        return attrCode;
    }


    /**
     * Sets the value of the 'attrCode' field.
     * Код характеристики
     * @param value the value to set.
     */
    public void setAttrCode(int value) {
        this.attrCode = value;
    }

    /**
     * Gets the value of the 'attrName' field.
     * @return Наименование характеристики
     */
    public java.lang.CharSequence getAttrName() {
        return attrName;
    }


    /**
     * Sets the value of the 'attrName' field.
     * Наименование характеристики
     * @param value the value to set.
     */
    public void setAttrName(java.lang.CharSequence value) {
        this.attrName = value;
    }

    /**
     * Gets the value of the 'attrValue' field.
     * @return Значение характеристики
     */
    public java.lang.CharSequence getAttrValue() {
        return attrValue;
    }


    /**
     * Sets the value of the 'attrValue' field.
     * Значение характеристики
     * @param value the value to set.
     */
    public void setAttrValue(java.lang.CharSequence value) {
        this.attrValue = value;
    }

    /**
     * Gets the value of the 'attrTypeCode' field.
     * @return Тип данных (1 - строка, 2 - число, 3 - дата)
     */
    public int getAttrTypeCode() {
        return attrTypeCode;
    }


    /**
     * Sets the value of the 'attrTypeCode' field.
     * Тип данных (1 - строка, 2 - число, 3 - дата)
     * @param value the value to set.
     */
    public void setAttrTypeCode(int value) {
        this.attrTypeCode = value;
    }

    /**
     * Gets the value of the 'attrTypeValue' field.
     * @return Тип значения (1 - простое, 2 - перечисленное)
     */
    public int getAttrTypeValue() {
        return attrTypeValue;
    }


    /**
     * Sets the value of the 'attrTypeValue' field.
     * Тип значения (1 - простое, 2 - перечисленное)
     * @param value the value to set.
     */
    public void setAttrTypeValue(int value) {
        this.attrTypeValue = value;
    }

    /**
     * Gets the value of the 'attrFormat' field.
     * @return Формат передачи характеристики
     */
    public java.lang.CharSequence getAttrFormat() {
        return attrFormat;
    }


    /**
     * Sets the value of the 'attrFormat' field.
     * Формат передачи характеристики
     * @param value the value to set.
     */
    public void setAttrFormat(java.lang.CharSequence value) {
        this.attrFormat = value;
    }

    /**
     * Gets the value of the 'attrMeasure' field.
     * @return Единица измерения характеристики
     */
    public java.lang.CharSequence getAttrMeasure() {
        return attrMeasure;
    }


    /**
     * Sets the value of the 'attrMeasure' field.
     * Единица измерения характеристики
     * @param value the value to set.
     */
    public void setAttrMeasure(java.lang.CharSequence value) {
        this.attrMeasure = value;
    }

    /**
     * Gets the value of the 'listValues' field.
     * @return The value of the 'listValues' field.
     */
    public java.util.List<nlmk.l3.ccm.pgp.RecordListValues> getListValues() {
        return listValues;
    }


    /**
     * Sets the value of the 'listValues' field.
     * @param value the value to set.
     */
    public void setListValues(java.util.List<nlmk.l3.ccm.pgp.RecordListValues> value) {
        this.listValues = value;
    }

    /**
     * Creates a new RecordOrderReq RecordBuilder.
     * @return A new RecordOrderReq RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.RecordOrderReq.Builder newBuilder() {
        return new nlmk.l3.ccm.pgp.RecordOrderReq.Builder();
    }

    /**
     * Creates a new RecordOrderReq RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new RecordOrderReq RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.RecordOrderReq.Builder newBuilder(nlmk.l3.ccm.pgp.RecordOrderReq.Builder other) {
        if (other == null) {
            return new nlmk.l3.ccm.pgp.RecordOrderReq.Builder();
        } else {
            return new nlmk.l3.ccm.pgp.RecordOrderReq.Builder(other);
        }
    }

    /**
     * Creates a new RecordOrderReq RecordBuilder by copying an existing RecordOrderReq instance.
     * @param other The existing instance to copy.
     * @return A new RecordOrderReq RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.RecordOrderReq.Builder newBuilder(nlmk.l3.ccm.pgp.RecordOrderReq other) {
        if (other == null) {
            return new nlmk.l3.ccm.pgp.RecordOrderReq.Builder();
        } else {
            return new nlmk.l3.ccm.pgp.RecordOrderReq.Builder(other);
        }
    }

    /**
     * RecordBuilder for RecordOrderReq instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordOrderReq>
            implements org.apache.avro.data.RecordBuilder<RecordOrderReq> {

        /** Код характеристики */
        private int attrCode;
        /** Наименование характеристики */
        private java.lang.CharSequence attrName;
        /** Значение характеристики */
        private java.lang.CharSequence attrValue;
        /** Тип данных (1 - строка, 2 - число, 3 - дата) */
        private int attrTypeCode;
        /** Тип значения (1 - простое, 2 - перечисленное) */
        private int attrTypeValue;
        /** Формат передачи характеристики */
        private java.lang.CharSequence attrFormat;
        /** Единица измерения характеристики */
        private java.lang.CharSequence attrMeasure;
        private java.util.List<nlmk.l3.ccm.pgp.RecordListValues> listValues;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(nlmk.l3.ccm.pgp.RecordOrderReq.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.attrCode)) {
                this.attrCode = data().deepCopy(fields()[0].schema(), other.attrCode);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.attrName)) {
                this.attrName = data().deepCopy(fields()[1].schema(), other.attrName);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.attrValue)) {
                this.attrValue = data().deepCopy(fields()[2].schema(), other.attrValue);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.attrTypeCode)) {
                this.attrTypeCode = data().deepCopy(fields()[3].schema(), other.attrTypeCode);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.attrTypeValue)) {
                this.attrTypeValue = data().deepCopy(fields()[4].schema(), other.attrTypeValue);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.attrFormat)) {
                this.attrFormat = data().deepCopy(fields()[5].schema(), other.attrFormat);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.attrMeasure)) {
                this.attrMeasure = data().deepCopy(fields()[6].schema(), other.attrMeasure);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.listValues)) {
                this.listValues = data().deepCopy(fields()[7].schema(), other.listValues);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
        }

        /**
         * Creates a Builder by copying an existing RecordOrderReq instance
         * @param other The existing instance to copy.
         */
        private Builder(nlmk.l3.ccm.pgp.RecordOrderReq other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.attrCode)) {
                this.attrCode = data().deepCopy(fields()[0].schema(), other.attrCode);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.attrName)) {
                this.attrName = data().deepCopy(fields()[1].schema(), other.attrName);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.attrValue)) {
                this.attrValue = data().deepCopy(fields()[2].schema(), other.attrValue);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.attrTypeCode)) {
                this.attrTypeCode = data().deepCopy(fields()[3].schema(), other.attrTypeCode);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.attrTypeValue)) {
                this.attrTypeValue = data().deepCopy(fields()[4].schema(), other.attrTypeValue);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.attrFormat)) {
                this.attrFormat = data().deepCopy(fields()[5].schema(), other.attrFormat);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.attrMeasure)) {
                this.attrMeasure = data().deepCopy(fields()[6].schema(), other.attrMeasure);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.listValues)) {
                this.listValues = data().deepCopy(fields()[7].schema(), other.listValues);
                fieldSetFlags()[7] = true;
            }
        }

        /**
         * Gets the value of the 'attrCode' field.
         * Код характеристики
         * @return The value.
         */
        public int getAttrCode() {
            return attrCode;
        }


        /**
         * Sets the value of the 'attrCode' field.
         * Код характеристики
         * @param value The value of 'attrCode'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setAttrCode(int value) {
            validate(fields()[0], value);
            this.attrCode = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'attrCode' field has been set.
         * Код характеристики
         * @return True if the 'attrCode' field has been set, false otherwise.
         */
        public boolean hasAttrCode() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'attrCode' field.
         * Код характеристики
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearAttrCode() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'attrName' field.
         * Наименование характеристики
         * @return The value.
         */
        public java.lang.CharSequence getAttrName() {
            return attrName;
        }


        /**
         * Sets the value of the 'attrName' field.
         * Наименование характеристики
         * @param value The value of 'attrName'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setAttrName(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.attrName = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'attrName' field has been set.
         * Наименование характеристики
         * @return True if the 'attrName' field has been set, false otherwise.
         */
        public boolean hasAttrName() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'attrName' field.
         * Наименование характеристики
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearAttrName() {
            attrName = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'attrValue' field.
         * Значение характеристики
         * @return The value.
         */
        public java.lang.CharSequence getAttrValue() {
            return attrValue;
        }


        /**
         * Sets the value of the 'attrValue' field.
         * Значение характеристики
         * @param value The value of 'attrValue'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setAttrValue(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.attrValue = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'attrValue' field has been set.
         * Значение характеристики
         * @return True if the 'attrValue' field has been set, false otherwise.
         */
        public boolean hasAttrValue() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'attrValue' field.
         * Значение характеристики
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearAttrValue() {
            attrValue = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'attrTypeCode' field.
         * Тип данных (1 - строка, 2 - число, 3 - дата)
         * @return The value.
         */
        public int getAttrTypeCode() {
            return attrTypeCode;
        }


        /**
         * Sets the value of the 'attrTypeCode' field.
         * Тип данных (1 - строка, 2 - число, 3 - дата)
         * @param value The value of 'attrTypeCode'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setAttrTypeCode(int value) {
            validate(fields()[3], value);
            this.attrTypeCode = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'attrTypeCode' field has been set.
         * Тип данных (1 - строка, 2 - число, 3 - дата)
         * @return True if the 'attrTypeCode' field has been set, false otherwise.
         */
        public boolean hasAttrTypeCode() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'attrTypeCode' field.
         * Тип данных (1 - строка, 2 - число, 3 - дата)
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearAttrTypeCode() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'attrTypeValue' field.
         * Тип значения (1 - простое, 2 - перечисленное)
         * @return The value.
         */
        public int getAttrTypeValue() {
            return attrTypeValue;
        }


        /**
         * Sets the value of the 'attrTypeValue' field.
         * Тип значения (1 - простое, 2 - перечисленное)
         * @param value The value of 'attrTypeValue'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setAttrTypeValue(int value) {
            validate(fields()[4], value);
            this.attrTypeValue = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'attrTypeValue' field has been set.
         * Тип значения (1 - простое, 2 - перечисленное)
         * @return True if the 'attrTypeValue' field has been set, false otherwise.
         */
        public boolean hasAttrTypeValue() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'attrTypeValue' field.
         * Тип значения (1 - простое, 2 - перечисленное)
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearAttrTypeValue() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'attrFormat' field.
         * Формат передачи характеристики
         * @return The value.
         */
        public java.lang.CharSequence getAttrFormat() {
            return attrFormat;
        }


        /**
         * Sets the value of the 'attrFormat' field.
         * Формат передачи характеристики
         * @param value The value of 'attrFormat'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setAttrFormat(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.attrFormat = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'attrFormat' field has been set.
         * Формат передачи характеристики
         * @return True if the 'attrFormat' field has been set, false otherwise.
         */
        public boolean hasAttrFormat() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'attrFormat' field.
         * Формат передачи характеристики
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearAttrFormat() {
            attrFormat = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'attrMeasure' field.
         * Единица измерения характеристики
         * @return The value.
         */
        public java.lang.CharSequence getAttrMeasure() {
            return attrMeasure;
        }


        /**
         * Sets the value of the 'attrMeasure' field.
         * Единица измерения характеристики
         * @param value The value of 'attrMeasure'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setAttrMeasure(java.lang.CharSequence value) {
            validate(fields()[6], value);
            this.attrMeasure = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'attrMeasure' field has been set.
         * Единица измерения характеристики
         * @return True if the 'attrMeasure' field has been set, false otherwise.
         */
        public boolean hasAttrMeasure() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'attrMeasure' field.
         * Единица измерения характеристики
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearAttrMeasure() {
            attrMeasure = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'listValues' field.
         * @return The value.
         */
        public java.util.List<nlmk.l3.ccm.pgp.RecordListValues> getListValues() {
            return listValues;
        }


        /**
         * Sets the value of the 'listValues' field.
         * @param value The value of 'listValues'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder setListValues(java.util.List<nlmk.l3.ccm.pgp.RecordListValues> value) {
            validate(fields()[7], value);
            this.listValues = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'listValues' field has been set.
         * @return True if the 'listValues' field has been set, false otherwise.
         */
        public boolean hasListValues() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'listValues' field.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordOrderReq.Builder clearListValues() {
            listValues = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public RecordOrderReq build() {
            try {
                RecordOrderReq record = new RecordOrderReq();
                record.attrCode = fieldSetFlags()[0] ? this.attrCode : (java.lang.Integer) defaultValue(fields()[0]);
                record.attrName = fieldSetFlags()[1] ? this.attrName : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.attrValue = fieldSetFlags()[2] ? this.attrValue : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.attrTypeCode = fieldSetFlags()[3] ? this.attrTypeCode : (java.lang.Integer) defaultValue(fields()[3]);
                record.attrTypeValue = fieldSetFlags()[4] ? this.attrTypeValue : (java.lang.Integer) defaultValue(fields()[4]);
                record.attrFormat = fieldSetFlags()[5] ? this.attrFormat : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.attrMeasure = fieldSetFlags()[6] ? this.attrMeasure : (java.lang.CharSequence) defaultValue(fields()[6]);
                record.listValues = fieldSetFlags()[7] ? this.listValues : (java.util.List<nlmk.l3.ccm.pgp.RecordListValues>) defaultValue(fields()[7]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<RecordOrderReq>
            WRITER$ = (org.apache.avro.io.DatumWriter<RecordOrderReq>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<RecordOrderReq>
            READER$ = (org.apache.avro.io.DatumReader<RecordOrderReq>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeInt(this.attrCode);

        out.writeString(this.attrName);

        if (this.attrValue == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.attrValue);
        }

        out.writeInt(this.attrTypeCode);

        out.writeInt(this.attrTypeValue);

        if (this.attrFormat == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.attrFormat);
        }

        if (this.attrMeasure == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.attrMeasure);
        }

        if (this.listValues == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            long size0 = this.listValues.size();
            out.writeArrayStart();
            out.setItemCount(size0);
            long actualSize0 = 0;
            for (nlmk.l3.ccm.pgp.RecordListValues e0 : this.listValues) {
                actualSize0++;
                out.startItem();
                e0.customEncode(out);
            }
            out.writeArrayEnd();
            if (actualSize0 != size0)
                throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.attrCode = in.readInt();

            this.attrName = in.readString(this.attrName instanceof Utf8 ? (Utf8) this.attrName : null);

            if (in.readIndex() != 1) {
                in.readNull();
                this.attrValue = null;
            } else {
                this.attrValue = in.readString(this.attrValue instanceof Utf8 ? (Utf8) this.attrValue : null);
            }

            this.attrTypeCode = in.readInt();

            this.attrTypeValue = in.readInt();

            if (in.readIndex() != 1) {
                in.readNull();
                this.attrFormat = null;
            } else {
                this.attrFormat = in.readString(this.attrFormat instanceof Utf8 ? (Utf8) this.attrFormat : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.attrMeasure = null;
            } else {
                this.attrMeasure = in.readString(this.attrMeasure instanceof Utf8 ? (Utf8) this.attrMeasure : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.listValues = null;
            } else {
                long size0 = in.readArrayStart();
                java.util.List<nlmk.l3.ccm.pgp.RecordListValues> a0 = this.listValues;
                if (a0 == null) {
                    a0 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordListValues>((int) size0, SCHEMA$.getField("listValues").schema().getTypes().get(1));
                    this.listValues = a0;
                } else a0.clear();
                SpecificData.Array<nlmk.l3.ccm.pgp.RecordListValues> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordListValues>) a0 : null);
                for (; 0 < size0; size0 = in.arrayNext()) {
                    for (; size0 != 0; size0--) {
                        nlmk.l3.ccm.pgp.RecordListValues e0 = (ga0 != null ? ga0.peek() : null);
                        if (e0 == null) {
                            e0 = new nlmk.l3.ccm.pgp.RecordListValues();
                        }
                        e0.customDecode(in);
                        a0.add(e0);
                    }
                }
            }

        } else {
            for (int i = 0; i < 8; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.attrCode = in.readInt();
                        break;

                    case 1:
                        this.attrName = in.readString(this.attrName instanceof Utf8 ? (Utf8) this.attrName : null);
                        break;

                    case 2:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.attrValue = null;
                        } else {
                            this.attrValue = in.readString(this.attrValue instanceof Utf8 ? (Utf8) this.attrValue : null);
                        }
                        break;

                    case 3:
                        this.attrTypeCode = in.readInt();
                        break;

                    case 4:
                        this.attrTypeValue = in.readInt();
                        break;

                    case 5:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.attrFormat = null;
                        } else {
                            this.attrFormat = in.readString(this.attrFormat instanceof Utf8 ? (Utf8) this.attrFormat : null);
                        }
                        break;

                    case 6:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.attrMeasure = null;
                        } else {
                            this.attrMeasure = in.readString(this.attrMeasure instanceof Utf8 ? (Utf8) this.attrMeasure : null);
                        }
                        break;

                    case 7:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.listValues = null;
                        } else {
                            long size0 = in.readArrayStart();
                            java.util.List<nlmk.l3.ccm.pgp.RecordListValues> a0 = this.listValues;
                            if (a0 == null) {
                                a0 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordListValues>((int) size0, SCHEMA$.getField("listValues").schema().getTypes().get(1));
                                this.listValues = a0;
                            } else a0.clear();
                            SpecificData.Array<nlmk.l3.ccm.pgp.RecordListValues> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordListValues>) a0 : null);
                            for (; 0 < size0; size0 = in.arrayNext()) {
                                for (; size0 != 0; size0--) {
                                    nlmk.l3.ccm.pgp.RecordListValues e0 = (ga0 != null ? ga0.peek() : null);
                                    if (e0 == null) {
                                        e0 = new nlmk.l3.ccm.pgp.RecordListValues();
                                    }
                                    e0.customDecode(in);
                                    a0.add(e0);
                                }
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










