/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.ccm.pgp;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordMechData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5755506813616704429L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordMechData\",\"namespace\":\"nlmk.l3.ccm.pgp\",\"fields\":[{\"name\":\"mechCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"mechName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"mechFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"mechValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"mechTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"mechMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordMechData> ENCODER =
      new BinaryMessageEncoder<RecordMechData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordMechData> DECODER =
      new BinaryMessageDecoder<RecordMechData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordMechData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordMechData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordMechData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordMechData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordMechData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordMechData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordMechData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordMechData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Код характеристики */
   private int mechCode;
  /** Наименование характеристики */
   private java.lang.CharSequence mechName;
  /** Формат передачи характеристики */
   private java.lang.CharSequence mechFormat;
  /** Значение характеристики */
   private java.lang.CharSequence mechValue;
  /** Тип данных (1 - строка, 2 - число, 3 - дата) */
   private int mechTypeCode;
  /** Единица измерения характеристики */
   private java.lang.CharSequence mechMeasure;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordMechData() {}

  /**
   * All-args constructor.
   * @param mechCode Код характеристики
   * @param mechName Наименование характеристики
   * @param mechFormat Формат передачи характеристики
   * @param mechValue Значение характеристики
   * @param mechTypeCode Тип данных (1 - строка, 2 - число, 3 - дата)
   * @param mechMeasure Единица измерения характеристики
   */
  public RecordMechData(java.lang.Integer mechCode, java.lang.CharSequence mechName, java.lang.CharSequence mechFormat, java.lang.CharSequence mechValue, java.lang.Integer mechTypeCode, java.lang.CharSequence mechMeasure) {
    this.mechCode = mechCode;
    this.mechName = mechName;
    this.mechFormat = mechFormat;
    this.mechValue = mechValue;
    this.mechTypeCode = mechTypeCode;
    this.mechMeasure = mechMeasure;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mechCode;
    case 1: return mechName;
    case 2: return mechFormat;
    case 3: return mechValue;
    case 4: return mechTypeCode;
    case 5: return mechMeasure;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mechCode = (java.lang.Integer)value$; break;
    case 1: mechName = (java.lang.CharSequence)value$; break;
    case 2: mechFormat = (java.lang.CharSequence)value$; break;
    case 3: mechValue = (java.lang.CharSequence)value$; break;
    case 4: mechTypeCode = (java.lang.Integer)value$; break;
    case 5: mechMeasure = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mechCode' field.
   * @return Код характеристики
   */
  public int getMechCode() {
    return mechCode;
  }


  /**
   * Sets the value of the 'mechCode' field.
   * Код характеристики
   * @param value the value to set.
   */
  public void setMechCode(int value) {
    this.mechCode = value;
  }

  /**
   * Gets the value of the 'mechName' field.
   * @return Наименование характеристики
   */
  public java.lang.CharSequence getMechName() {
    return mechName;
  }


  /**
   * Sets the value of the 'mechName' field.
   * Наименование характеристики
   * @param value the value to set.
   */
  public void setMechName(java.lang.CharSequence value) {
    this.mechName = value;
  }

  /**
   * Gets the value of the 'mechFormat' field.
   * @return Формат передачи характеристики
   */
  public java.lang.CharSequence getMechFormat() {
    return mechFormat;
  }


  /**
   * Sets the value of the 'mechFormat' field.
   * Формат передачи характеристики
   * @param value the value to set.
   */
  public void setMechFormat(java.lang.CharSequence value) {
    this.mechFormat = value;
  }

  /**
   * Gets the value of the 'mechValue' field.
   * @return Значение характеристики
   */
  public java.lang.CharSequence getMechValue() {
    return mechValue;
  }


  /**
   * Sets the value of the 'mechValue' field.
   * Значение характеристики
   * @param value the value to set.
   */
  public void setMechValue(java.lang.CharSequence value) {
    this.mechValue = value;
  }

  /**
   * Gets the value of the 'mechTypeCode' field.
   * @return Тип данных (1 - строка, 2 - число, 3 - дата)
   */
  public int getMechTypeCode() {
    return mechTypeCode;
  }


  /**
   * Sets the value of the 'mechTypeCode' field.
   * Тип данных (1 - строка, 2 - число, 3 - дата)
   * @param value the value to set.
   */
  public void setMechTypeCode(int value) {
    this.mechTypeCode = value;
  }

  /**
   * Gets the value of the 'mechMeasure' field.
   * @return Единица измерения характеристики
   */
  public java.lang.CharSequence getMechMeasure() {
    return mechMeasure;
  }


  /**
   * Sets the value of the 'mechMeasure' field.
   * Единица измерения характеристики
   * @param value the value to set.
   */
  public void setMechMeasure(java.lang.CharSequence value) {
    this.mechMeasure = value;
  }

  /**
   * Creates a new RecordMechData RecordBuilder.
   * @return A new RecordMechData RecordBuilder
   */
  public static nlmk.l3.ccm.pgp.RecordMechData.Builder newBuilder() {
    return new nlmk.l3.ccm.pgp.RecordMechData.Builder();
  }

  /**
   * Creates a new RecordMechData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordMechData RecordBuilder
   */
  public static nlmk.l3.ccm.pgp.RecordMechData.Builder newBuilder(nlmk.l3.ccm.pgp.RecordMechData.Builder other) {
    if (other == null) {
      return new nlmk.l3.ccm.pgp.RecordMechData.Builder();
    } else {
      return new nlmk.l3.ccm.pgp.RecordMechData.Builder(other);
    }
  }

  /**
   * Creates a new RecordMechData RecordBuilder by copying an existing RecordMechData instance.
   * @param other The existing instance to copy.
   * @return A new RecordMechData RecordBuilder
   */
  public static nlmk.l3.ccm.pgp.RecordMechData.Builder newBuilder(nlmk.l3.ccm.pgp.RecordMechData other) {
    if (other == null) {
      return new nlmk.l3.ccm.pgp.RecordMechData.Builder();
    } else {
      return new nlmk.l3.ccm.pgp.RecordMechData.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordMechData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordMechData>
    implements org.apache.avro.data.RecordBuilder<RecordMechData> {

    /** Код характеристики */
    private int mechCode;
    /** Наименование характеристики */
    private java.lang.CharSequence mechName;
    /** Формат передачи характеристики */
    private java.lang.CharSequence mechFormat;
    /** Значение характеристики */
    private java.lang.CharSequence mechValue;
    /** Тип данных (1 - строка, 2 - число, 3 - дата) */
    private int mechTypeCode;
    /** Единица измерения характеристики */
    private java.lang.CharSequence mechMeasure;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.ccm.pgp.RecordMechData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mechCode)) {
        this.mechCode = data().deepCopy(fields()[0].schema(), other.mechCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mechName)) {
        this.mechName = data().deepCopy(fields()[1].schema(), other.mechName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mechFormat)) {
        this.mechFormat = data().deepCopy(fields()[2].schema(), other.mechFormat);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.mechValue)) {
        this.mechValue = data().deepCopy(fields()[3].schema(), other.mechValue);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.mechTypeCode)) {
        this.mechTypeCode = data().deepCopy(fields()[4].schema(), other.mechTypeCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.mechMeasure)) {
        this.mechMeasure = data().deepCopy(fields()[5].schema(), other.mechMeasure);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordMechData instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.ccm.pgp.RecordMechData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mechCode)) {
        this.mechCode = data().deepCopy(fields()[0].schema(), other.mechCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mechName)) {
        this.mechName = data().deepCopy(fields()[1].schema(), other.mechName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mechFormat)) {
        this.mechFormat = data().deepCopy(fields()[2].schema(), other.mechFormat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mechValue)) {
        this.mechValue = data().deepCopy(fields()[3].schema(), other.mechValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mechTypeCode)) {
        this.mechTypeCode = data().deepCopy(fields()[4].schema(), other.mechTypeCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mechMeasure)) {
        this.mechMeasure = data().deepCopy(fields()[5].schema(), other.mechMeasure);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'mechCode' field.
      * Код характеристики
      * @return The value.
      */
    public int getMechCode() {
      return mechCode;
    }


    /**
      * Sets the value of the 'mechCode' field.
      * Код характеристики
      * @param value The value of 'mechCode'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder setMechCode(int value) {
      validate(fields()[0], value);
      this.mechCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mechCode' field has been set.
      * Код характеристики
      * @return True if the 'mechCode' field has been set, false otherwise.
      */
    public boolean hasMechCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mechCode' field.
      * Код характеристики
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder clearMechCode() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechName' field.
      * Наименование характеристики
      * @return The value.
      */
    public java.lang.CharSequence getMechName() {
      return mechName;
    }


    /**
      * Sets the value of the 'mechName' field.
      * Наименование характеристики
      * @param value The value of 'mechName'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder setMechName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.mechName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mechName' field has been set.
      * Наименование характеристики
      * @return True if the 'mechName' field has been set, false otherwise.
      */
    public boolean hasMechName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mechName' field.
      * Наименование характеристики
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder clearMechName() {
      mechName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechFormat' field.
      * Формат передачи характеристики
      * @return The value.
      */
    public java.lang.CharSequence getMechFormat() {
      return mechFormat;
    }


    /**
      * Sets the value of the 'mechFormat' field.
      * Формат передачи характеристики
      * @param value The value of 'mechFormat'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder setMechFormat(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.mechFormat = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mechFormat' field has been set.
      * Формат передачи характеристики
      * @return True if the 'mechFormat' field has been set, false otherwise.
      */
    public boolean hasMechFormat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mechFormat' field.
      * Формат передачи характеристики
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder clearMechFormat() {
      mechFormat = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechValue' field.
      * Значение характеристики
      * @return The value.
      */
    public java.lang.CharSequence getMechValue() {
      return mechValue;
    }


    /**
      * Sets the value of the 'mechValue' field.
      * Значение характеристики
      * @param value The value of 'mechValue'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder setMechValue(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.mechValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mechValue' field has been set.
      * Значение характеристики
      * @return True if the 'mechValue' field has been set, false otherwise.
      */
    public boolean hasMechValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mechValue' field.
      * Значение характеристики
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder clearMechValue() {
      mechValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechTypeCode' field.
      * Тип данных (1 - строка, 2 - число, 3 - дата)
      * @return The value.
      */
    public int getMechTypeCode() {
      return mechTypeCode;
    }


    /**
      * Sets the value of the 'mechTypeCode' field.
      * Тип данных (1 - строка, 2 - число, 3 - дата)
      * @param value The value of 'mechTypeCode'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder setMechTypeCode(int value) {
      validate(fields()[4], value);
      this.mechTypeCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mechTypeCode' field has been set.
      * Тип данных (1 - строка, 2 - число, 3 - дата)
      * @return True if the 'mechTypeCode' field has been set, false otherwise.
      */
    public boolean hasMechTypeCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mechTypeCode' field.
      * Тип данных (1 - строка, 2 - число, 3 - дата)
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder clearMechTypeCode() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechMeasure' field.
      * Единица измерения характеристики
      * @return The value.
      */
    public java.lang.CharSequence getMechMeasure() {
      return mechMeasure;
    }


    /**
      * Sets the value of the 'mechMeasure' field.
      * Единица измерения характеристики
      * @param value The value of 'mechMeasure'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder setMechMeasure(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.mechMeasure = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'mechMeasure' field has been set.
      * Единица измерения характеристики
      * @return True if the 'mechMeasure' field has been set, false otherwise.
      */
    public boolean hasMechMeasure() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'mechMeasure' field.
      * Единица измерения характеристики
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordMechData.Builder clearMechMeasure() {
      mechMeasure = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordMechData build() {
      try {
        RecordMechData record = new RecordMechData();
        record.mechCode = fieldSetFlags()[0] ? this.mechCode : (java.lang.Integer) defaultValue(fields()[0]);
        record.mechName = fieldSetFlags()[1] ? this.mechName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.mechFormat = fieldSetFlags()[2] ? this.mechFormat : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.mechValue = fieldSetFlags()[3] ? this.mechValue : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.mechTypeCode = fieldSetFlags()[4] ? this.mechTypeCode : (java.lang.Integer) defaultValue(fields()[4]);
        record.mechMeasure = fieldSetFlags()[5] ? this.mechMeasure : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordMechData>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordMechData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordMechData>
    READER$ = (org.apache.avro.io.DatumReader<RecordMechData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.mechCode);

    out.writeString(this.mechName);

    if (this.mechFormat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mechFormat);
    }

    if (this.mechValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mechValue);
    }

    out.writeInt(this.mechTypeCode);

    if (this.mechMeasure == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mechMeasure);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.mechCode = in.readInt();

      this.mechName = in.readString(this.mechName instanceof Utf8 ? (Utf8)this.mechName : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.mechFormat = null;
      } else {
        this.mechFormat = in.readString(this.mechFormat instanceof Utf8 ? (Utf8)this.mechFormat : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mechValue = null;
      } else {
        this.mechValue = in.readString(this.mechValue instanceof Utf8 ? (Utf8)this.mechValue : null);
      }

      this.mechTypeCode = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.mechMeasure = null;
      } else {
        this.mechMeasure = in.readString(this.mechMeasure instanceof Utf8 ? (Utf8)this.mechMeasure : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.mechCode = in.readInt();
          break;

        case 1:
          this.mechName = in.readString(this.mechName instanceof Utf8 ? (Utf8)this.mechName : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mechFormat = null;
          } else {
            this.mechFormat = in.readString(this.mechFormat instanceof Utf8 ? (Utf8)this.mechFormat : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mechValue = null;
          } else {
            this.mechValue = in.readString(this.mechValue instanceof Utf8 ? (Utf8)this.mechValue : null);
          }
          break;

        case 4:
          this.mechTypeCode = in.readInt();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mechMeasure = null;
          } else {
            this.mechMeasure = in.readString(this.mechMeasure instanceof Utf8 ? (Utf8)this.mechMeasure : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










