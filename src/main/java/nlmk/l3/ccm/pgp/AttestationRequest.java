/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.ccm.pgp;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Запрос на проведение аттестации единицы продукции */
@org.apache.avro.specific.AvroGenerated
public class AttestationRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 5626587489633290612L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttestationRequest\",\"namespace\":\"nlmk.l3.ccm.pgp\",\"doc\":\"Запрос на проведение аттестации единицы продукции\",\"fields\":[{\"name\":\"ts\",\"type\":\"string\",\"doc\":\"Дата и время передачи\"},{\"name\":\"op\",\"type\":{\"type\":\"enum\",\"name\":\"EnumOp\",\"symbols\":[\"D\",\"I\",\"U\"]},\"doc\":\"Операция\"},{\"name\":\"pk\",\"type\":{\"type\":\"record\",\"name\":\"RecordPk\",\"fields\":[{\"name\":\"systemCode\",\"type\":\"string\",\"doc\":\"Код системы\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"ИД единицы металла (ЕМ)\"}]}},{\"name\":\"data\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"RecordData\",\"fields\":[{\"name\":\"primeId\",\"type\":\"string\",\"doc\":\"Идентификатор ЕМ на стане\"},{\"name\":\"nplv\",\"type\":[\"null\",\"int\"],\"doc\":\"№ плавки\",\"default\":null},{\"name\":\"hnum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер ГК партии\",\"default\":null},{\"name\":\"roll\",\"type\":\"string\",\"doc\":\"Номер рулона/пачки\"},{\"name\":\"length\",\"type\":[\"null\",\"float\"],\"doc\":\"Длина\",\"default\":null},{\"name\":\"thickness\",\"type\":\"float\",\"doc\":\"Толщина\"},{\"name\":\"width\",\"type\":\"float\",\"doc\":\"Ширина\"},{\"name\":\"weightNet\",\"type\":\"float\",\"doc\":\"Масса единицы продукции\"},{\"name\":\"bundleWeight\",\"type\":[\"null\",\"float\"],\"doc\":\"Масса связки\",\"default\":null},{\"name\":\"kceh\",\"type\":\"int\",\"doc\":\"Номер цеха\"},{\"name\":\"orderNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер заказа\",\"default\":null},{\"name\":\"orderPos\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер позиции заказа\",\"default\":null},{\"name\":\"specifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordSpecifications\",\"fields\":[{\"name\":\"specCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"specName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"specValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"specTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"specFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"specMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}},{\"name\":\"orderReq\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordOrderReq\",\"fields\":[{\"name\":\"attrCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"attrName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"attrValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"attrTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"attrTypeValue\",\"type\":\"int\",\"doc\":\"Тип значения (1 - простое, 2 - перечисленное)\"},{\"name\":\"attrFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"attrMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null},{\"name\":\"listValues\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordListValues\",\"fields\":[{\"name\":\"value\",\"type\":\"string\",\"doc\":\"Значение из списка\"}]}}],\"default\":null}]}}],\"default\":null},{\"name\":\"chemical\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordChemical\",\"fields\":[{\"name\":\"chemCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"chemName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"chemValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"chemFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null}]}}],\"default\":null},{\"name\":\"mechanical\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMechanical\",\"fields\":[{\"name\":\"testArrayId\",\"type\":[\"null\",\"int\"],\"doc\":\"Идентификатор испытательного массива\",\"default\":null},{\"name\":\"hnum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер испытуемой горячекатаной партии\",\"default\":null},{\"name\":\"protId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД протокола\",\"default\":null},{\"name\":\"protNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер протокола\",\"default\":null},{\"name\":\"sampleId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД пробы\",\"default\":null},{\"name\":\"probeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Наименование вида пробы\",\"default\":null},{\"name\":\"probeCode\",\"type\":[\"null\",\"int\"],\"doc\":\"Код вида пробы\",\"default\":null},{\"name\":\"sampleNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер пробы (образца)\",\"default\":null},{\"name\":\"signAnalysis\",\"type\":[\"null\",\"int\"],\"doc\":\"Признак испытаний\",\"default\":null},{\"name\":\"formationListId\",\"type\":[\"null\",\"string\"],\"doc\":\"ИД формировочной карточки\",\"default\":null},{\"name\":\"formationListNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер формировочной карточки\",\"default\":null},{\"name\":\"mechData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMechData\",\"fields\":[{\"name\":\"mechCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"mechName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"mechFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"mechValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"mechTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"mechMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}}]}}],\"default\":null},{\"name\":\"metallographic\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMetallographic\",\"fields\":[{\"name\":\"testArrayId\",\"type\":[\"null\",\"int\"],\"doc\":\"Идентификатор испытательного массива\",\"default\":null},{\"name\":\"hnum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер испытуемой горячекатаной партии\",\"default\":null},{\"name\":\"protId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД протокола\",\"default\":null},{\"name\":\"protNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер протокола\",\"default\":null},{\"name\":\"sampleId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД пробы\",\"default\":null},{\"name\":\"probeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Наименование вида пробы\",\"default\":null},{\"name\":\"probeCode\",\"type\":[\"null\",\"int\"],\"doc\":\"Код вида пробы\",\"default\":null},{\"name\":\"sampleNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер пробы (образца)\",\"default\":null},{\"name\":\"signAnalysis\",\"type\":[\"null\",\"int\"],\"doc\":\"Признак испытаний\",\"default\":null},{\"name\":\"formationListId\",\"type\":[\"null\",\"string\"],\"doc\":\"ИД формировочной карточки\",\"default\":null},{\"name\":\"formationListNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер формировочной карточки\",\"default\":null},{\"name\":\"metgrapData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMetgrapData\",\"fields\":[{\"name\":\"metgrapCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"metgrapName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"metgrapFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"metgrapValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"metgrapTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"metgrapMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}}]}}],\"default\":null}]}],\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<AttestationRequest> ENCODER =
            new BinaryMessageEncoder<AttestationRequest>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<AttestationRequest> DECODER =
            new BinaryMessageDecoder<AttestationRequest>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<AttestationRequest> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<AttestationRequest> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<AttestationRequest> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<AttestationRequest>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this AttestationRequest to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a AttestationRequest from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a AttestationRequest instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static AttestationRequest fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Дата и время передачи */
    private java.lang.CharSequence ts;
    /** Операция */
    private nlmk.l3.ccm.pgp.EnumOp op;
    private nlmk.l3.ccm.pgp.RecordPk pk;
    private nlmk.l3.ccm.pgp.RecordData data;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public AttestationRequest() {
    }

    /**
     * All-args constructor.
     * @param ts Дата и время передачи
     * @param op Операция
     * @param pk The new value for pk
     * @param data The new value for data
     */
    public AttestationRequest(java.lang.CharSequence ts, nlmk.l3.ccm.pgp.EnumOp op, nlmk.l3.ccm.pgp.RecordPk pk, nlmk.l3.ccm.pgp.RecordData data) {
        this.ts = ts;
        this.op = op;
        this.pk = pk;
        this.data = data;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return ts;
            case 1:
                return op;
            case 2:
                return pk;
            case 3:
                return data;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                ts = (java.lang.CharSequence) value$;
                break;
            case 1:
                op = (nlmk.l3.ccm.pgp.EnumOp) value$;
                break;
            case 2:
                pk = (nlmk.l3.ccm.pgp.RecordPk) value$;
                break;
            case 3:
                data = (nlmk.l3.ccm.pgp.RecordData) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'ts' field.
     * @return Дата и время передачи
     */
    public java.lang.CharSequence getTs() {
        return ts;
    }


    /**
     * Sets the value of the 'ts' field.
     * Дата и время передачи
     * @param value the value to set.
     */
    public void setTs(java.lang.CharSequence value) {
        this.ts = value;
    }

    /**
     * Gets the value of the 'op' field.
     * @return Операция
     */
    public nlmk.l3.ccm.pgp.EnumOp getOp() {
        return op;
    }


    /**
     * Sets the value of the 'op' field.
     * Операция
     * @param value the value to set.
     */
    public void setOp(nlmk.l3.ccm.pgp.EnumOp value) {
        this.op = value;
    }

    /**
     * Gets the value of the 'pk' field.
     * @return The value of the 'pk' field.
     */
    public nlmk.l3.ccm.pgp.RecordPk getPk() {
        return pk;
    }


    /**
     * Sets the value of the 'pk' field.
     * @param value the value to set.
     */
    public void setPk(nlmk.l3.ccm.pgp.RecordPk value) {
        this.pk = value;
    }

    /**
     * Gets the value of the 'data' field.
     * @return The value of the 'data' field.
     */
    public nlmk.l3.ccm.pgp.RecordData getData() {
        return data;
    }


    /**
     * Sets the value of the 'data' field.
     * @param value the value to set.
     */
    public void setData(nlmk.l3.ccm.pgp.RecordData value) {
        this.data = value;
    }

    /**
     * Creates a new AttestationRequest RecordBuilder.
     * @return A new AttestationRequest RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.AttestationRequest.Builder newBuilder() {
        return new nlmk.l3.ccm.pgp.AttestationRequest.Builder();
    }

    /**
     * Creates a new AttestationRequest RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new AttestationRequest RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.AttestationRequest.Builder newBuilder(nlmk.l3.ccm.pgp.AttestationRequest.Builder other) {
        if (other == null) {
            return new nlmk.l3.ccm.pgp.AttestationRequest.Builder();
        } else {
            return new nlmk.l3.ccm.pgp.AttestationRequest.Builder(other);
        }
    }

    /**
     * Creates a new AttestationRequest RecordBuilder by copying an existing AttestationRequest instance.
     * @param other The existing instance to copy.
     * @return A new AttestationRequest RecordBuilder
     */
    public static nlmk.l3.ccm.pgp.AttestationRequest.Builder newBuilder(nlmk.l3.ccm.pgp.AttestationRequest other) {
        if (other == null) {
            return new nlmk.l3.ccm.pgp.AttestationRequest.Builder();
        } else {
            return new nlmk.l3.ccm.pgp.AttestationRequest.Builder(other);
        }
    }

    /**
     * RecordBuilder for AttestationRequest instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AttestationRequest>
            implements org.apache.avro.data.RecordBuilder<AttestationRequest> {

        /** Дата и время передачи */
        private java.lang.CharSequence ts;
        /** Операция */
        private nlmk.l3.ccm.pgp.EnumOp op;
        private nlmk.l3.ccm.pgp.RecordPk pk;
        private nlmk.l3.ccm.pgp.RecordPk.Builder pkBuilder;
        private nlmk.l3.ccm.pgp.RecordData data;
        private nlmk.l3.ccm.pgp.RecordData.Builder dataBuilder;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(nlmk.l3.ccm.pgp.AttestationRequest.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.ts)) {
                this.ts = data().deepCopy(fields()[0].schema(), other.ts);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.op)) {
                this.op = data().deepCopy(fields()[1].schema(), other.op);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.pk)) {
                this.pk = data().deepCopy(fields()[2].schema(), other.pk);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (other.hasPkBuilder()) {
                this.pkBuilder = nlmk.l3.ccm.pgp.RecordPk.newBuilder(other.getPkBuilder());
            }
            if (isValidValue(fields()[3], other.data)) {
                this.data = data().deepCopy(fields()[3].schema(), other.data);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (other.hasDataBuilder()) {
                this.dataBuilder = nlmk.l3.ccm.pgp.RecordData.newBuilder(other.getDataBuilder());
            }
        }

        /**
         * Creates a Builder by copying an existing AttestationRequest instance
         * @param other The existing instance to copy.
         */
        private Builder(nlmk.l3.ccm.pgp.AttestationRequest other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.ts)) {
                this.ts = data().deepCopy(fields()[0].schema(), other.ts);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.op)) {
                this.op = data().deepCopy(fields()[1].schema(), other.op);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.pk)) {
                this.pk = data().deepCopy(fields()[2].schema(), other.pk);
                fieldSetFlags()[2] = true;
            }
            this.pkBuilder = null;
            if (isValidValue(fields()[3], other.data)) {
                this.data = data().deepCopy(fields()[3].schema(), other.data);
                fieldSetFlags()[3] = true;
            }
            this.dataBuilder = null;
        }

        /**
         * Gets the value of the 'ts' field.
         * Дата и время передачи
         * @return The value.
         */
        public java.lang.CharSequence getTs() {
            return ts;
        }


        /**
         * Sets the value of the 'ts' field.
         * Дата и время передачи
         * @param value The value of 'ts'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder setTs(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.ts = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'ts' field has been set.
         * Дата и время передачи
         * @return True if the 'ts' field has been set, false otherwise.
         */
        public boolean hasTs() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'ts' field.
         * Дата и время передачи
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder clearTs() {
            ts = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'op' field.
         * Операция
         * @return The value.
         */
        public nlmk.l3.ccm.pgp.EnumOp getOp() {
            return op;
        }


        /**
         * Sets the value of the 'op' field.
         * Операция
         * @param value The value of 'op'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder setOp(nlmk.l3.ccm.pgp.EnumOp value) {
            validate(fields()[1], value);
            this.op = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'op' field has been set.
         * Операция
         * @return True if the 'op' field has been set, false otherwise.
         */
        public boolean hasOp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'op' field.
         * Операция
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder clearOp() {
            op = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'pk' field.
         * @return The value.
         */
        public nlmk.l3.ccm.pgp.RecordPk getPk() {
            return pk;
        }


        /**
         * Sets the value of the 'pk' field.
         * @param value The value of 'pk'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder setPk(nlmk.l3.ccm.pgp.RecordPk value) {
            validate(fields()[2], value);
            this.pkBuilder = null;
            this.pk = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'pk' field has been set.
         * @return True if the 'pk' field has been set, false otherwise.
         */
        public boolean hasPk() {
            return fieldSetFlags()[2];
        }

        /**
         * Gets the Builder instance for the 'pk' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordPk.Builder getPkBuilder() {
            if (pkBuilder == null) {
                if (hasPk()) {
                    setPkBuilder(nlmk.l3.ccm.pgp.RecordPk.newBuilder(pk));
                } else {
                    setPkBuilder(nlmk.l3.ccm.pgp.RecordPk.newBuilder());
                }
            }
            return pkBuilder;
        }

        /**
         * Sets the Builder instance for the 'pk' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public nlmk.l3.ccm.pgp.AttestationRequest.Builder setPkBuilder(nlmk.l3.ccm.pgp.RecordPk.Builder value) {
            clearPk();
            pkBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'pk' field has an active Builder instance
         * @return True if the 'pk' field has an active Builder instance
         */
        public boolean hasPkBuilder() {
            return pkBuilder != null;
        }

        /**
         * Clears the value of the 'pk' field.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder clearPk() {
            pk = null;
            pkBuilder = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'data' field.
         * @return The value.
         */
        public nlmk.l3.ccm.pgp.RecordData getData() {
            return data;
        }


        /**
         * Sets the value of the 'data' field.
         * @param value The value of 'data'.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder setData(nlmk.l3.ccm.pgp.RecordData value) {
            validate(fields()[3], value);
            this.dataBuilder = null;
            this.data = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'data' field has been set.
         * @return True if the 'data' field has been set, false otherwise.
         */
        public boolean hasData() {
            return fieldSetFlags()[3];
        }

        /**
         * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.RecordData.Builder getDataBuilder() {
            if (dataBuilder == null) {
                if (hasData()) {
                    setDataBuilder(nlmk.l3.ccm.pgp.RecordData.newBuilder(data));
                } else {
                    setDataBuilder(nlmk.l3.ccm.pgp.RecordData.newBuilder());
                }
            }
            return dataBuilder;
        }

        /**
         * Sets the Builder instance for the 'data' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public nlmk.l3.ccm.pgp.AttestationRequest.Builder setDataBuilder(nlmk.l3.ccm.pgp.RecordData.Builder value) {
            clearData();
            dataBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'data' field has an active Builder instance
         * @return True if the 'data' field has an active Builder instance
         */
        public boolean hasDataBuilder() {
            return dataBuilder != null;
        }

        /**
         * Clears the value of the 'data' field.
         * @return This builder.
         */
        public nlmk.l3.ccm.pgp.AttestationRequest.Builder clearData() {
            data = null;
            dataBuilder = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public AttestationRequest build() {
            try {
                AttestationRequest record = new AttestationRequest();
                record.ts = fieldSetFlags()[0] ? this.ts : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.op = fieldSetFlags()[1] ? this.op : (nlmk.l3.ccm.pgp.EnumOp) defaultValue(fields()[1]);
                if (pkBuilder != null) {
                    try {
                        record.pk = this.pkBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("pk"));
                        throw e;
                    }
                } else {
                    record.pk = fieldSetFlags()[2] ? this.pk : (nlmk.l3.ccm.pgp.RecordPk) defaultValue(fields()[2]);
                }
                if (dataBuilder != null) {
                    try {
                        record.data = this.dataBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("data"));
                        throw e;
                    }
                } else {
                    record.data = fieldSetFlags()[3] ? this.data : (nlmk.l3.ccm.pgp.RecordData) defaultValue(fields()[3]);
                }
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<AttestationRequest>
            WRITER$ = (org.apache.avro.io.DatumWriter<AttestationRequest>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<AttestationRequest>
            READER$ = (org.apache.avro.io.DatumReader<AttestationRequest>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.ts);

        out.writeEnum(this.op.ordinal());

        this.pk.customEncode(out);

        if (this.data == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            this.data.customEncode(out);
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.ts = in.readString(this.ts instanceof Utf8 ? (Utf8) this.ts : null);

            this.op = nlmk.l3.ccm.pgp.EnumOp.values()[in.readEnum()];

            if (this.pk == null) {
                this.pk = new nlmk.l3.ccm.pgp.RecordPk();
            }
            this.pk.customDecode(in);

            if (in.readIndex() != 1) {
                in.readNull();
                this.data = null;
            } else {
                if (this.data == null) {
                    this.data = new nlmk.l3.ccm.pgp.RecordData();
                }
                this.data.customDecode(in);
            }

        } else {
            for (int i = 0; i < 4; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.ts = in.readString(this.ts instanceof Utf8 ? (Utf8) this.ts : null);
                        break;

                    case 1:
                        this.op = nlmk.l3.ccm.pgp.EnumOp.values()[in.readEnum()];
                        break;

                    case 2:
                        if (this.pk == null) {
                            this.pk = new nlmk.l3.ccm.pgp.RecordPk();
                        }
                        this.pk.customDecode(in);
                        break;

                    case 3:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.data = null;
                        } else {
                            if (this.data == null) {
                                this.data = new nlmk.l3.ccm.pgp.RecordData();
                            }
                            this.data.customDecode(in);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










