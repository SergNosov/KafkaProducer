/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.ccm.pgp;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6616666964236290711L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordData\",\"namespace\":\"nlmk.l3.ccm.pgp\",\"fields\":[{\"name\":\"primeId\",\"type\":\"string\",\"doc\":\"Идентификатор ЕМ на стане\"},{\"name\":\"nplv\",\"type\":[\"null\",\"int\"],\"doc\":\"№ плавки\",\"default\":null},{\"name\":\"hnum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер ГК партии\",\"default\":null},{\"name\":\"roll\",\"type\":\"string\",\"doc\":\"Номер рулона/пачки\"},{\"name\":\"length\",\"type\":[\"null\",\"float\"],\"doc\":\"Длина\",\"default\":null},{\"name\":\"thickness\",\"type\":\"float\",\"doc\":\"Толщина\"},{\"name\":\"width\",\"type\":\"float\",\"doc\":\"Ширина\"},{\"name\":\"weightNet\",\"type\":\"float\",\"doc\":\"Масса единицы продукции\"},{\"name\":\"bundleWeight\",\"type\":[\"null\",\"float\"],\"doc\":\"Масса связки\",\"default\":null},{\"name\":\"kceh\",\"type\":\"int\",\"doc\":\"Номер цеха\"},{\"name\":\"orderNum\",\"type\":\"int\",\"doc\":\"Номер заказа\"},{\"name\":\"orderPos\",\"type\":\"int\",\"doc\":\"Номер позиции заказа\"},{\"name\":\"specifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordSpecifications\",\"fields\":[{\"name\":\"specCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"specName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"specValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"specTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"specFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"specMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}},{\"name\":\"orderReq\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordOrderReq\",\"fields\":[{\"name\":\"attrCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"attrName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"attrValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"attrTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"attrFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"attrMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}],\"default\":null},{\"name\":\"chemical\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordChemical\",\"fields\":[{\"name\":\"chemCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"chemName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"chemValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"chemFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null}]}}],\"default\":null},{\"name\":\"mechanical\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMechanical\",\"fields\":[{\"name\":\"testArrayId\",\"type\":[\"null\",\"int\"],\"doc\":\"Идентификатор испытательного массива\",\"default\":null},{\"name\":\"hnum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер испытуемой горячекатаной партии\",\"default\":null},{\"name\":\"protId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД протокола\",\"default\":null},{\"name\":\"protNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер протокола\",\"default\":null},{\"name\":\"sampleId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД пробы\",\"default\":null},{\"name\":\"probeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Наименование вида пробы\",\"default\":null},{\"name\":\"probeCode\",\"type\":[\"null\",\"int\"],\"doc\":\"Код вида пробы\",\"default\":null},{\"name\":\"sampleNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер пробы (образца)\",\"default\":null},{\"name\":\"signAnalysis\",\"type\":[\"null\",\"int\"],\"doc\":\"Признак испытаний\",\"default\":null},{\"name\":\"formationListId\",\"type\":[\"null\",\"string\"],\"doc\":\"ИД формировочной карточки\",\"default\":null},{\"name\":\"formationListNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер формировочной карточки\",\"default\":null},{\"name\":\"mechData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMechData\",\"fields\":[{\"name\":\"mechCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"mechName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"mechFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"mechValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"mechTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"mechMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}}]}}],\"default\":null},{\"name\":\"metallographic\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMetallographic\",\"fields\":[{\"name\":\"testArrayId\",\"type\":[\"null\",\"int\"],\"doc\":\"Идентификатор испытательного массива\",\"default\":null},{\"name\":\"hnum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер испытуемой горячекатаной партии\",\"default\":null},{\"name\":\"protId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД протокола\",\"default\":null},{\"name\":\"protNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер протокола\",\"default\":null},{\"name\":\"sampleId\",\"type\":[\"null\",\"int\"],\"doc\":\"ИД пробы\",\"default\":null},{\"name\":\"probeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Наименование вида пробы\",\"default\":null},{\"name\":\"probeCode\",\"type\":[\"null\",\"int\"],\"doc\":\"Код вида пробы\",\"default\":null},{\"name\":\"sampleNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер пробы (образца)\",\"default\":null},{\"name\":\"signAnalysis\",\"type\":[\"null\",\"int\"],\"doc\":\"Признак испытаний\",\"default\":null},{\"name\":\"formationListId\",\"type\":[\"null\",\"string\"],\"doc\":\"ИД формировочной карточки\",\"default\":null},{\"name\":\"formationListNum\",\"type\":[\"null\",\"int\"],\"doc\":\"Номер формировочной карточки\",\"default\":null},{\"name\":\"metgrapData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordMetgrapData\",\"fields\":[{\"name\":\"metgrapCode\",\"type\":\"int\",\"doc\":\"Код характеристики\"},{\"name\":\"metgrapName\",\"type\":\"string\",\"doc\":\"Наименование характеристики\"},{\"name\":\"metgrapFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"Формат передачи характеристики\",\"default\":null},{\"name\":\"metgrapValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Значение характеристики\",\"default\":null},{\"name\":\"metgrapTypeCode\",\"type\":\"int\",\"doc\":\"Тип данных (1 - строка, 2 - число, 3 - дата)\"},{\"name\":\"metgrapMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"Единица измерения характеристики\",\"default\":null}]}}}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordData> ENCODER =
      new BinaryMessageEncoder<RecordData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordData> DECODER =
      new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Идентификатор ЕМ на стане */
   private java.lang.CharSequence primeId;
  /** № плавки */
   private java.lang.Integer nplv;
  /** Номер ГК партии */
   private java.lang.Integer hnum;
  /** Номер рулона/пачки */
   private java.lang.CharSequence roll;
  /** Длина */
   private java.lang.Float length;
  /** Толщина */
   private float thickness;
  /** Ширина */
   private float width;
  /** Масса единицы продукции */
   private float weightNet;
  /** Масса связки */
   private java.lang.Float bundleWeight;
  /** Номер цеха */
   private int kceh;
  /** Номер заказа */
   private int orderNum;
  /** Номер позиции заказа */
   private int orderPos;
   private java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> specifications;
   private java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> orderReq;
   private java.util.List<nlmk.l3.ccm.pgp.RecordChemical> chemical;
   private java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> mechanical;
   private java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> metallographic;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordData() {}

  /**
   * All-args constructor.
   * @param primeId Идентификатор ЕМ на стане
   * @param nplv № плавки
   * @param hnum Номер ГК партии
   * @param roll Номер рулона/пачки
   * @param length Длина
   * @param thickness Толщина
   * @param width Ширина
   * @param weightNet Масса единицы продукции
   * @param bundleWeight Масса связки
   * @param kceh Номер цеха
   * @param orderNum Номер заказа
   * @param orderPos Номер позиции заказа
   * @param specifications The new value for specifications
   * @param orderReq The new value for orderReq
   * @param chemical The new value for chemical
   * @param mechanical The new value for mechanical
   * @param metallographic The new value for metallographic
   */
  public RecordData(java.lang.CharSequence primeId, java.lang.Integer nplv, java.lang.Integer hnum, java.lang.CharSequence roll, java.lang.Float length, java.lang.Float thickness, java.lang.Float width, java.lang.Float weightNet, java.lang.Float bundleWeight, java.lang.Integer kceh, java.lang.Integer orderNum, java.lang.Integer orderPos, java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> specifications, java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> orderReq, java.util.List<nlmk.l3.ccm.pgp.RecordChemical> chemical, java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> mechanical, java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> metallographic) {
    this.primeId = primeId;
    this.nplv = nplv;
    this.hnum = hnum;
    this.roll = roll;
    this.length = length;
    this.thickness = thickness;
    this.width = width;
    this.weightNet = weightNet;
    this.bundleWeight = bundleWeight;
    this.kceh = kceh;
    this.orderNum = orderNum;
    this.orderPos = orderPos;
    this.specifications = specifications;
    this.orderReq = orderReq;
    this.chemical = chemical;
    this.mechanical = mechanical;
    this.metallographic = metallographic;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return primeId;
    case 1: return nplv;
    case 2: return hnum;
    case 3: return roll;
    case 4: return length;
    case 5: return thickness;
    case 6: return width;
    case 7: return weightNet;
    case 8: return bundleWeight;
    case 9: return kceh;
    case 10: return orderNum;
    case 11: return orderPos;
    case 12: return specifications;
    case 13: return orderReq;
    case 14: return chemical;
    case 15: return mechanical;
    case 16: return metallographic;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: primeId = (java.lang.CharSequence)value$; break;
    case 1: nplv = (java.lang.Integer)value$; break;
    case 2: hnum = (java.lang.Integer)value$; break;
    case 3: roll = (java.lang.CharSequence)value$; break;
    case 4: length = (java.lang.Float)value$; break;
    case 5: thickness = (java.lang.Float)value$; break;
    case 6: width = (java.lang.Float)value$; break;
    case 7: weightNet = (java.lang.Float)value$; break;
    case 8: bundleWeight = (java.lang.Float)value$; break;
    case 9: kceh = (java.lang.Integer)value$; break;
    case 10: orderNum = (java.lang.Integer)value$; break;
    case 11: orderPos = (java.lang.Integer)value$; break;
    case 12: specifications = (java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications>)value$; break;
    case 13: orderReq = (java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq>)value$; break;
    case 14: chemical = (java.util.List<nlmk.l3.ccm.pgp.RecordChemical>)value$; break;
    case 15: mechanical = (java.util.List<nlmk.l3.ccm.pgp.RecordMechanical>)value$; break;
    case 16: metallographic = (java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'primeId' field.
   * @return Идентификатор ЕМ на стане
   */
  public java.lang.CharSequence getPrimeId() {
    return primeId;
  }


  /**
   * Sets the value of the 'primeId' field.
   * Идентификатор ЕМ на стане
   * @param value the value to set.
   */
  public void setPrimeId(java.lang.CharSequence value) {
    this.primeId = value;
  }

  /**
   * Gets the value of the 'nplv' field.
   * @return № плавки
   */
  public java.lang.Integer getNplv() {
    return nplv;
  }


  /**
   * Sets the value of the 'nplv' field.
   * № плавки
   * @param value the value to set.
   */
  public void setNplv(java.lang.Integer value) {
    this.nplv = value;
  }

  /**
   * Gets the value of the 'hnum' field.
   * @return Номер ГК партии
   */
  public java.lang.Integer getHnum() {
    return hnum;
  }


  /**
   * Sets the value of the 'hnum' field.
   * Номер ГК партии
   * @param value the value to set.
   */
  public void setHnum(java.lang.Integer value) {
    this.hnum = value;
  }

  /**
   * Gets the value of the 'roll' field.
   * @return Номер рулона/пачки
   */
  public java.lang.CharSequence getRoll() {
    return roll;
  }


  /**
   * Sets the value of the 'roll' field.
   * Номер рулона/пачки
   * @param value the value to set.
   */
  public void setRoll(java.lang.CharSequence value) {
    this.roll = value;
  }

  /**
   * Gets the value of the 'length' field.
   * @return Длина
   */
  public java.lang.Float getLength() {
    return length;
  }


  /**
   * Sets the value of the 'length' field.
   * Длина
   * @param value the value to set.
   */
  public void setLength(java.lang.Float value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'thickness' field.
   * @return Толщина
   */
  public float getThickness() {
    return thickness;
  }


  /**
   * Sets the value of the 'thickness' field.
   * Толщина
   * @param value the value to set.
   */
  public void setThickness(float value) {
    this.thickness = value;
  }

  /**
   * Gets the value of the 'width' field.
   * @return Ширина
   */
  public float getWidth() {
    return width;
  }


  /**
   * Sets the value of the 'width' field.
   * Ширина
   * @param value the value to set.
   */
  public void setWidth(float value) {
    this.width = value;
  }

  /**
   * Gets the value of the 'weightNet' field.
   * @return Масса единицы продукции
   */
  public float getWeightNet() {
    return weightNet;
  }


  /**
   * Sets the value of the 'weightNet' field.
   * Масса единицы продукции
   * @param value the value to set.
   */
  public void setWeightNet(float value) {
    this.weightNet = value;
  }

  /**
   * Gets the value of the 'bundleWeight' field.
   * @return Масса связки
   */
  public java.lang.Float getBundleWeight() {
    return bundleWeight;
  }


  /**
   * Sets the value of the 'bundleWeight' field.
   * Масса связки
   * @param value the value to set.
   */
  public void setBundleWeight(java.lang.Float value) {
    this.bundleWeight = value;
  }

  /**
   * Gets the value of the 'kceh' field.
   * @return Номер цеха
   */
  public int getKceh() {
    return kceh;
  }


  /**
   * Sets the value of the 'kceh' field.
   * Номер цеха
   * @param value the value to set.
   */
  public void setKceh(int value) {
    this.kceh = value;
  }

  /**
   * Gets the value of the 'orderNum' field.
   * @return Номер заказа
   */
  public int getOrderNum() {
    return orderNum;
  }


  /**
   * Sets the value of the 'orderNum' field.
   * Номер заказа
   * @param value the value to set.
   */
  public void setOrderNum(int value) {
    this.orderNum = value;
  }

  /**
   * Gets the value of the 'orderPos' field.
   * @return Номер позиции заказа
   */
  public int getOrderPos() {
    return orderPos;
  }


  /**
   * Sets the value of the 'orderPos' field.
   * Номер позиции заказа
   * @param value the value to set.
   */
  public void setOrderPos(int value) {
    this.orderPos = value;
  }

  /**
   * Gets the value of the 'specifications' field.
   * @return The value of the 'specifications' field.
   */
  public java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> getSpecifications() {
    return specifications;
  }


  /**
   * Sets the value of the 'specifications' field.
   * @param value the value to set.
   */
  public void setSpecifications(java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> value) {
    this.specifications = value;
  }

  /**
   * Gets the value of the 'orderReq' field.
   * @return The value of the 'orderReq' field.
   */
  public java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> getOrderReq() {
    return orderReq;
  }


  /**
   * Sets the value of the 'orderReq' field.
   * @param value the value to set.
   */
  public void setOrderReq(java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> value) {
    this.orderReq = value;
  }

  /**
   * Gets the value of the 'chemical' field.
   * @return The value of the 'chemical' field.
   */
  public java.util.List<nlmk.l3.ccm.pgp.RecordChemical> getChemical() {
    return chemical;
  }


  /**
   * Sets the value of the 'chemical' field.
   * @param value the value to set.
   */
  public void setChemical(java.util.List<nlmk.l3.ccm.pgp.RecordChemical> value) {
    this.chemical = value;
  }

  /**
   * Gets the value of the 'mechanical' field.
   * @return The value of the 'mechanical' field.
   */
  public java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> getMechanical() {
    return mechanical;
  }


  /**
   * Sets the value of the 'mechanical' field.
   * @param value the value to set.
   */
  public void setMechanical(java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> value) {
    this.mechanical = value;
  }

  /**
   * Gets the value of the 'metallographic' field.
   * @return The value of the 'metallographic' field.
   */
  public java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> getMetallographic() {
    return metallographic;
  }


  /**
   * Sets the value of the 'metallographic' field.
   * @param value the value to set.
   */
  public void setMetallographic(java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> value) {
    this.metallographic = value;
  }

  /**
   * Creates a new RecordData RecordBuilder.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.ccm.pgp.RecordData.Builder newBuilder() {
    return new nlmk.l3.ccm.pgp.RecordData.Builder();
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.ccm.pgp.RecordData.Builder newBuilder(nlmk.l3.ccm.pgp.RecordData.Builder other) {
    if (other == null) {
      return new nlmk.l3.ccm.pgp.RecordData.Builder();
    } else {
      return new nlmk.l3.ccm.pgp.RecordData.Builder(other);
    }
  }

  /**
   * Creates a new RecordData RecordBuilder by copying an existing RecordData instance.
   * @param other The existing instance to copy.
   * @return A new RecordData RecordBuilder
   */
  public static nlmk.l3.ccm.pgp.RecordData.Builder newBuilder(nlmk.l3.ccm.pgp.RecordData other) {
    if (other == null) {
      return new nlmk.l3.ccm.pgp.RecordData.Builder();
    } else {
      return new nlmk.l3.ccm.pgp.RecordData.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordData>
    implements org.apache.avro.data.RecordBuilder<RecordData> {

    /** Идентификатор ЕМ на стане */
    private java.lang.CharSequence primeId;
    /** № плавки */
    private java.lang.Integer nplv;
    /** Номер ГК партии */
    private java.lang.Integer hnum;
    /** Номер рулона/пачки */
    private java.lang.CharSequence roll;
    /** Длина */
    private java.lang.Float length;
    /** Толщина */
    private float thickness;
    /** Ширина */
    private float width;
    /** Масса единицы продукции */
    private float weightNet;
    /** Масса связки */
    private java.lang.Float bundleWeight;
    /** Номер цеха */
    private int kceh;
    /** Номер заказа */
    private int orderNum;
    /** Номер позиции заказа */
    private int orderPos;
    private java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> specifications;
    private java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> orderReq;
    private java.util.List<nlmk.l3.ccm.pgp.RecordChemical> chemical;
    private java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> mechanical;
    private java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> metallographic;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.ccm.pgp.RecordData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.primeId)) {
        this.primeId = data().deepCopy(fields()[0].schema(), other.primeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nplv)) {
        this.nplv = data().deepCopy(fields()[1].schema(), other.nplv);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.hnum)) {
        this.hnum = data().deepCopy(fields()[2].schema(), other.hnum);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.roll)) {
        this.roll = data().deepCopy(fields()[3].schema(), other.roll);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.length)) {
        this.length = data().deepCopy(fields()[4].schema(), other.length);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.thickness)) {
        this.thickness = data().deepCopy(fields()[5].schema(), other.thickness);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.width)) {
        this.width = data().deepCopy(fields()[6].schema(), other.width);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.weightNet)) {
        this.weightNet = data().deepCopy(fields()[7].schema(), other.weightNet);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.bundleWeight)) {
        this.bundleWeight = data().deepCopy(fields()[8].schema(), other.bundleWeight);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.kceh)) {
        this.kceh = data().deepCopy(fields()[9].schema(), other.kceh);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.orderNum)) {
        this.orderNum = data().deepCopy(fields()[10].schema(), other.orderNum);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.orderPos)) {
        this.orderPos = data().deepCopy(fields()[11].schema(), other.orderPos);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.specifications)) {
        this.specifications = data().deepCopy(fields()[12].schema(), other.specifications);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.orderReq)) {
        this.orderReq = data().deepCopy(fields()[13].schema(), other.orderReq);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.chemical)) {
        this.chemical = data().deepCopy(fields()[14].schema(), other.chemical);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.mechanical)) {
        this.mechanical = data().deepCopy(fields()[15].schema(), other.mechanical);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.metallographic)) {
        this.metallographic = data().deepCopy(fields()[16].schema(), other.metallographic);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordData instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.ccm.pgp.RecordData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.primeId)) {
        this.primeId = data().deepCopy(fields()[0].schema(), other.primeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nplv)) {
        this.nplv = data().deepCopy(fields()[1].schema(), other.nplv);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hnum)) {
        this.hnum = data().deepCopy(fields()[2].schema(), other.hnum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.roll)) {
        this.roll = data().deepCopy(fields()[3].schema(), other.roll);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.length)) {
        this.length = data().deepCopy(fields()[4].schema(), other.length);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.thickness)) {
        this.thickness = data().deepCopy(fields()[5].schema(), other.thickness);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.width)) {
        this.width = data().deepCopy(fields()[6].schema(), other.width);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.weightNet)) {
        this.weightNet = data().deepCopy(fields()[7].schema(), other.weightNet);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bundleWeight)) {
        this.bundleWeight = data().deepCopy(fields()[8].schema(), other.bundleWeight);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.kceh)) {
        this.kceh = data().deepCopy(fields()[9].schema(), other.kceh);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.orderNum)) {
        this.orderNum = data().deepCopy(fields()[10].schema(), other.orderNum);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.orderPos)) {
        this.orderPos = data().deepCopy(fields()[11].schema(), other.orderPos);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.specifications)) {
        this.specifications = data().deepCopy(fields()[12].schema(), other.specifications);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.orderReq)) {
        this.orderReq = data().deepCopy(fields()[13].schema(), other.orderReq);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.chemical)) {
        this.chemical = data().deepCopy(fields()[14].schema(), other.chemical);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.mechanical)) {
        this.mechanical = data().deepCopy(fields()[15].schema(), other.mechanical);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.metallographic)) {
        this.metallographic = data().deepCopy(fields()[16].schema(), other.metallographic);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'primeId' field.
      * Идентификатор ЕМ на стане
      * @return The value.
      */
    public java.lang.CharSequence getPrimeId() {
      return primeId;
    }


    /**
      * Sets the value of the 'primeId' field.
      * Идентификатор ЕМ на стане
      * @param value The value of 'primeId'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setPrimeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.primeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'primeId' field has been set.
      * Идентификатор ЕМ на стане
      * @return True if the 'primeId' field has been set, false otherwise.
      */
    public boolean hasPrimeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'primeId' field.
      * Идентификатор ЕМ на стане
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearPrimeId() {
      primeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nplv' field.
      * № плавки
      * @return The value.
      */
    public java.lang.Integer getNplv() {
      return nplv;
    }


    /**
      * Sets the value of the 'nplv' field.
      * № плавки
      * @param value The value of 'nplv'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setNplv(java.lang.Integer value) {
      validate(fields()[1], value);
      this.nplv = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nplv' field has been set.
      * № плавки
      * @return True if the 'nplv' field has been set, false otherwise.
      */
    public boolean hasNplv() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nplv' field.
      * № плавки
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearNplv() {
      nplv = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hnum' field.
      * Номер ГК партии
      * @return The value.
      */
    public java.lang.Integer getHnum() {
      return hnum;
    }


    /**
      * Sets the value of the 'hnum' field.
      * Номер ГК партии
      * @param value The value of 'hnum'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setHnum(java.lang.Integer value) {
      validate(fields()[2], value);
      this.hnum = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hnum' field has been set.
      * Номер ГК партии
      * @return True if the 'hnum' field has been set, false otherwise.
      */
    public boolean hasHnum() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hnum' field.
      * Номер ГК партии
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearHnum() {
      hnum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'roll' field.
      * Номер рулона/пачки
      * @return The value.
      */
    public java.lang.CharSequence getRoll() {
      return roll;
    }


    /**
      * Sets the value of the 'roll' field.
      * Номер рулона/пачки
      * @param value The value of 'roll'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setRoll(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.roll = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'roll' field has been set.
      * Номер рулона/пачки
      * @return True if the 'roll' field has been set, false otherwise.
      */
    public boolean hasRoll() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'roll' field.
      * Номер рулона/пачки
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearRoll() {
      roll = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'length' field.
      * Длина
      * @return The value.
      */
    public java.lang.Float getLength() {
      return length;
    }


    /**
      * Sets the value of the 'length' field.
      * Длина
      * @param value The value of 'length'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setLength(java.lang.Float value) {
      validate(fields()[4], value);
      this.length = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'length' field has been set.
      * Длина
      * @return True if the 'length' field has been set, false otherwise.
      */
    public boolean hasLength() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'length' field.
      * Длина
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearLength() {
      length = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'thickness' field.
      * Толщина
      * @return The value.
      */
    public float getThickness() {
      return thickness;
    }


    /**
      * Sets the value of the 'thickness' field.
      * Толщина
      * @param value The value of 'thickness'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setThickness(float value) {
      validate(fields()[5], value);
      this.thickness = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'thickness' field has been set.
      * Толщина
      * @return True if the 'thickness' field has been set, false otherwise.
      */
    public boolean hasThickness() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'thickness' field.
      * Толщина
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearThickness() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'width' field.
      * Ширина
      * @return The value.
      */
    public float getWidth() {
      return width;
    }


    /**
      * Sets the value of the 'width' field.
      * Ширина
      * @param value The value of 'width'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setWidth(float value) {
      validate(fields()[6], value);
      this.width = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'width' field has been set.
      * Ширина
      * @return True if the 'width' field has been set, false otherwise.
      */
    public boolean hasWidth() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'width' field.
      * Ширина
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearWidth() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'weightNet' field.
      * Масса единицы продукции
      * @return The value.
      */
    public float getWeightNet() {
      return weightNet;
    }


    /**
      * Sets the value of the 'weightNet' field.
      * Масса единицы продукции
      * @param value The value of 'weightNet'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setWeightNet(float value) {
      validate(fields()[7], value);
      this.weightNet = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'weightNet' field has been set.
      * Масса единицы продукции
      * @return True if the 'weightNet' field has been set, false otherwise.
      */
    public boolean hasWeightNet() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'weightNet' field.
      * Масса единицы продукции
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearWeightNet() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'bundleWeight' field.
      * Масса связки
      * @return The value.
      */
    public java.lang.Float getBundleWeight() {
      return bundleWeight;
    }


    /**
      * Sets the value of the 'bundleWeight' field.
      * Масса связки
      * @param value The value of 'bundleWeight'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setBundleWeight(java.lang.Float value) {
      validate(fields()[8], value);
      this.bundleWeight = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'bundleWeight' field has been set.
      * Масса связки
      * @return True if the 'bundleWeight' field has been set, false otherwise.
      */
    public boolean hasBundleWeight() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'bundleWeight' field.
      * Масса связки
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearBundleWeight() {
      bundleWeight = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'kceh' field.
      * Номер цеха
      * @return The value.
      */
    public int getKceh() {
      return kceh;
    }


    /**
      * Sets the value of the 'kceh' field.
      * Номер цеха
      * @param value The value of 'kceh'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setKceh(int value) {
      validate(fields()[9], value);
      this.kceh = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'kceh' field has been set.
      * Номер цеха
      * @return True if the 'kceh' field has been set, false otherwise.
      */
    public boolean hasKceh() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'kceh' field.
      * Номер цеха
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearKceh() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderNum' field.
      * Номер заказа
      * @return The value.
      */
    public int getOrderNum() {
      return orderNum;
    }


    /**
      * Sets the value of the 'orderNum' field.
      * Номер заказа
      * @param value The value of 'orderNum'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setOrderNum(int value) {
      validate(fields()[10], value);
      this.orderNum = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'orderNum' field has been set.
      * Номер заказа
      * @return True if the 'orderNum' field has been set, false otherwise.
      */
    public boolean hasOrderNum() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'orderNum' field.
      * Номер заказа
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearOrderNum() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderPos' field.
      * Номер позиции заказа
      * @return The value.
      */
    public int getOrderPos() {
      return orderPos;
    }


    /**
      * Sets the value of the 'orderPos' field.
      * Номер позиции заказа
      * @param value The value of 'orderPos'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setOrderPos(int value) {
      validate(fields()[11], value);
      this.orderPos = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'orderPos' field has been set.
      * Номер позиции заказа
      * @return True if the 'orderPos' field has been set, false otherwise.
      */
    public boolean hasOrderPos() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'orderPos' field.
      * Номер позиции заказа
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearOrderPos() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'specifications' field.
      * @return The value.
      */
    public java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> getSpecifications() {
      return specifications;
    }


    /**
      * Sets the value of the 'specifications' field.
      * @param value The value of 'specifications'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setSpecifications(java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> value) {
      validate(fields()[12], value);
      this.specifications = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'specifications' field has been set.
      * @return True if the 'specifications' field has been set, false otherwise.
      */
    public boolean hasSpecifications() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'specifications' field.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearSpecifications() {
      specifications = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderReq' field.
      * @return The value.
      */
    public java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> getOrderReq() {
      return orderReq;
    }


    /**
      * Sets the value of the 'orderReq' field.
      * @param value The value of 'orderReq'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setOrderReq(java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> value) {
      validate(fields()[13], value);
      this.orderReq = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'orderReq' field has been set.
      * @return True if the 'orderReq' field has been set, false otherwise.
      */
    public boolean hasOrderReq() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'orderReq' field.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearOrderReq() {
      orderReq = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'chemical' field.
      * @return The value.
      */
    public java.util.List<nlmk.l3.ccm.pgp.RecordChemical> getChemical() {
      return chemical;
    }


    /**
      * Sets the value of the 'chemical' field.
      * @param value The value of 'chemical'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setChemical(java.util.List<nlmk.l3.ccm.pgp.RecordChemical> value) {
      validate(fields()[14], value);
      this.chemical = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'chemical' field has been set.
      * @return True if the 'chemical' field has been set, false otherwise.
      */
    public boolean hasChemical() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'chemical' field.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearChemical() {
      chemical = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechanical' field.
      * @return The value.
      */
    public java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> getMechanical() {
      return mechanical;
    }


    /**
      * Sets the value of the 'mechanical' field.
      * @param value The value of 'mechanical'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setMechanical(java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> value) {
      validate(fields()[15], value);
      this.mechanical = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'mechanical' field has been set.
      * @return True if the 'mechanical' field has been set, false otherwise.
      */
    public boolean hasMechanical() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'mechanical' field.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearMechanical() {
      mechanical = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'metallographic' field.
      * @return The value.
      */
    public java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> getMetallographic() {
      return metallographic;
    }


    /**
      * Sets the value of the 'metallographic' field.
      * @param value The value of 'metallographic'.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder setMetallographic(java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> value) {
      validate(fields()[16], value);
      this.metallographic = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'metallographic' field has been set.
      * @return True if the 'metallographic' field has been set, false otherwise.
      */
    public boolean hasMetallographic() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'metallographic' field.
      * @return This builder.
      */
    public nlmk.l3.ccm.pgp.RecordData.Builder clearMetallographic() {
      metallographic = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordData build() {
      try {
        RecordData record = new RecordData();
        record.primeId = fieldSetFlags()[0] ? this.primeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.nplv = fieldSetFlags()[1] ? this.nplv : (java.lang.Integer) defaultValue(fields()[1]);
        record.hnum = fieldSetFlags()[2] ? this.hnum : (java.lang.Integer) defaultValue(fields()[2]);
        record.roll = fieldSetFlags()[3] ? this.roll : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.length = fieldSetFlags()[4] ? this.length : (java.lang.Float) defaultValue(fields()[4]);
        record.thickness = fieldSetFlags()[5] ? this.thickness : (java.lang.Float) defaultValue(fields()[5]);
        record.width = fieldSetFlags()[6] ? this.width : (java.lang.Float) defaultValue(fields()[6]);
        record.weightNet = fieldSetFlags()[7] ? this.weightNet : (java.lang.Float) defaultValue(fields()[7]);
        record.bundleWeight = fieldSetFlags()[8] ? this.bundleWeight : (java.lang.Float) defaultValue(fields()[8]);
        record.kceh = fieldSetFlags()[9] ? this.kceh : (java.lang.Integer) defaultValue(fields()[9]);
        record.orderNum = fieldSetFlags()[10] ? this.orderNum : (java.lang.Integer) defaultValue(fields()[10]);
        record.orderPos = fieldSetFlags()[11] ? this.orderPos : (java.lang.Integer) defaultValue(fields()[11]);
        record.specifications = fieldSetFlags()[12] ? this.specifications : (java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications>) defaultValue(fields()[12]);
        record.orderReq = fieldSetFlags()[13] ? this.orderReq : (java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq>) defaultValue(fields()[13]);
        record.chemical = fieldSetFlags()[14] ? this.chemical : (java.util.List<nlmk.l3.ccm.pgp.RecordChemical>) defaultValue(fields()[14]);
        record.mechanical = fieldSetFlags()[15] ? this.mechanical : (java.util.List<nlmk.l3.ccm.pgp.RecordMechanical>) defaultValue(fields()[15]);
        record.metallographic = fieldSetFlags()[16] ? this.metallographic : (java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic>) defaultValue(fields()[16]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordData>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordData>
    READER$ = (org.apache.avro.io.DatumReader<RecordData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.primeId);

    if (this.nplv == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.nplv);
    }

    if (this.hnum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.hnum);
    }

    out.writeString(this.roll);

    if (this.length == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.length);
    }

    out.writeFloat(this.thickness);

    out.writeFloat(this.width);

    out.writeFloat(this.weightNet);

    if (this.bundleWeight == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.bundleWeight);
    }

    out.writeInt(this.kceh);

    out.writeInt(this.orderNum);

    out.writeInt(this.orderPos);

    long size0 = this.specifications.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (nlmk.l3.ccm.pgp.RecordSpecifications e0: this.specifications) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.orderReq == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.orderReq.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (nlmk.l3.ccm.pgp.RecordOrderReq e1: this.orderReq) {
        actualSize1++;
        out.startItem();
        e1.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.chemical == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.chemical.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (nlmk.l3.ccm.pgp.RecordChemical e2: this.chemical) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.mechanical == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.mechanical.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (nlmk.l3.ccm.pgp.RecordMechanical e3: this.mechanical) {
        actualSize3++;
        out.startItem();
        e3.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.metallographic == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.metallographic.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (nlmk.l3.ccm.pgp.RecordMetallographic e4: this.metallographic) {
        actualSize4++;
        out.startItem();
        e4.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.primeId = in.readString(this.primeId instanceof Utf8 ? (Utf8)this.primeId : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.nplv = null;
      } else {
        this.nplv = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hnum = null;
      } else {
        this.hnum = in.readInt();
      }

      this.roll = in.readString(this.roll instanceof Utf8 ? (Utf8)this.roll : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.length = null;
      } else {
        this.length = in.readFloat();
      }

      this.thickness = in.readFloat();

      this.width = in.readFloat();

      this.weightNet = in.readFloat();

      if (in.readIndex() != 1) {
        in.readNull();
        this.bundleWeight = null;
      } else {
        this.bundleWeight = in.readFloat();
      }

      this.kceh = in.readInt();

      this.orderNum = in.readInt();

      this.orderPos = in.readInt();

      long size0 = in.readArrayStart();
      java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> a0 = this.specifications;
      if (a0 == null) {
        a0 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordSpecifications>((int)size0, SCHEMA$.getField("specifications").schema());
        this.specifications = a0;
      } else a0.clear();
      SpecificData.Array<nlmk.l3.ccm.pgp.RecordSpecifications> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordSpecifications>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          nlmk.l3.ccm.pgp.RecordSpecifications e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new nlmk.l3.ccm.pgp.RecordSpecifications();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.orderReq = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> a1 = this.orderReq;
        if (a1 == null) {
          a1 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordOrderReq>((int)size1, SCHEMA$.getField("orderReq").schema().getTypes().get(1));
          this.orderReq = a1;
        } else a1.clear();
        SpecificData.Array<nlmk.l3.ccm.pgp.RecordOrderReq> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordOrderReq>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            nlmk.l3.ccm.pgp.RecordOrderReq e1 = (ga1 != null ? ga1.peek() : null);
            if (e1 == null) {
              e1 = new nlmk.l3.ccm.pgp.RecordOrderReq();
            }
            e1.customDecode(in);
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.chemical = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<nlmk.l3.ccm.pgp.RecordChemical> a2 = this.chemical;
        if (a2 == null) {
          a2 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordChemical>((int)size2, SCHEMA$.getField("chemical").schema().getTypes().get(1));
          this.chemical = a2;
        } else a2.clear();
        SpecificData.Array<nlmk.l3.ccm.pgp.RecordChemical> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordChemical>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            nlmk.l3.ccm.pgp.RecordChemical e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new nlmk.l3.ccm.pgp.RecordChemical();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mechanical = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> a3 = this.mechanical;
        if (a3 == null) {
          a3 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechanical>((int)size3, SCHEMA$.getField("mechanical").schema().getTypes().get(1));
          this.mechanical = a3;
        } else a3.clear();
        SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechanical> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechanical>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            nlmk.l3.ccm.pgp.RecordMechanical e3 = (ga3 != null ? ga3.peek() : null);
            if (e3 == null) {
              e3 = new nlmk.l3.ccm.pgp.RecordMechanical();
            }
            e3.customDecode(in);
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.metallographic = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> a4 = this.metallographic;
        if (a4 == null) {
          a4 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordMetallographic>((int)size4, SCHEMA$.getField("metallographic").schema().getTypes().get(1));
          this.metallographic = a4;
        } else a4.clear();
        SpecificData.Array<nlmk.l3.ccm.pgp.RecordMetallographic> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordMetallographic>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            nlmk.l3.ccm.pgp.RecordMetallographic e4 = (ga4 != null ? ga4.peek() : null);
            if (e4 == null) {
              e4 = new nlmk.l3.ccm.pgp.RecordMetallographic();
            }
            e4.customDecode(in);
            a4.add(e4);
          }
        }
      }

    } else {
      for (int i = 0; i < 17; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.primeId = in.readString(this.primeId instanceof Utf8 ? (Utf8)this.primeId : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nplv = null;
          } else {
            this.nplv = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hnum = null;
          } else {
            this.hnum = in.readInt();
          }
          break;

        case 3:
          this.roll = in.readString(this.roll instanceof Utf8 ? (Utf8)this.roll : null);
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.length = null;
          } else {
            this.length = in.readFloat();
          }
          break;

        case 5:
          this.thickness = in.readFloat();
          break;

        case 6:
          this.width = in.readFloat();
          break;

        case 7:
          this.weightNet = in.readFloat();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bundleWeight = null;
          } else {
            this.bundleWeight = in.readFloat();
          }
          break;

        case 9:
          this.kceh = in.readInt();
          break;

        case 10:
          this.orderNum = in.readInt();
          break;

        case 11:
          this.orderPos = in.readInt();
          break;

        case 12:
          long size0 = in.readArrayStart();
          java.util.List<nlmk.l3.ccm.pgp.RecordSpecifications> a0 = this.specifications;
          if (a0 == null) {
            a0 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordSpecifications>((int)size0, SCHEMA$.getField("specifications").schema());
            this.specifications = a0;
          } else a0.clear();
          SpecificData.Array<nlmk.l3.ccm.pgp.RecordSpecifications> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordSpecifications>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              nlmk.l3.ccm.pgp.RecordSpecifications e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new nlmk.l3.ccm.pgp.RecordSpecifications();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.orderReq = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<nlmk.l3.ccm.pgp.RecordOrderReq> a1 = this.orderReq;
            if (a1 == null) {
              a1 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordOrderReq>((int)size1, SCHEMA$.getField("orderReq").schema().getTypes().get(1));
              this.orderReq = a1;
            } else a1.clear();
            SpecificData.Array<nlmk.l3.ccm.pgp.RecordOrderReq> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordOrderReq>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                nlmk.l3.ccm.pgp.RecordOrderReq e1 = (ga1 != null ? ga1.peek() : null);
                if (e1 == null) {
                  e1 = new nlmk.l3.ccm.pgp.RecordOrderReq();
                }
                e1.customDecode(in);
                a1.add(e1);
              }
            }
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.chemical = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<nlmk.l3.ccm.pgp.RecordChemical> a2 = this.chemical;
            if (a2 == null) {
              a2 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordChemical>((int)size2, SCHEMA$.getField("chemical").schema().getTypes().get(1));
              this.chemical = a2;
            } else a2.clear();
            SpecificData.Array<nlmk.l3.ccm.pgp.RecordChemical> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordChemical>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                nlmk.l3.ccm.pgp.RecordChemical e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new nlmk.l3.ccm.pgp.RecordChemical();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mechanical = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<nlmk.l3.ccm.pgp.RecordMechanical> a3 = this.mechanical;
            if (a3 == null) {
              a3 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechanical>((int)size3, SCHEMA$.getField("mechanical").schema().getTypes().get(1));
              this.mechanical = a3;
            } else a3.clear();
            SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechanical> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordMechanical>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                nlmk.l3.ccm.pgp.RecordMechanical e3 = (ga3 != null ? ga3.peek() : null);
                if (e3 == null) {
                  e3 = new nlmk.l3.ccm.pgp.RecordMechanical();
                }
                e3.customDecode(in);
                a3.add(e3);
              }
            }
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.metallographic = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<nlmk.l3.ccm.pgp.RecordMetallographic> a4 = this.metallographic;
            if (a4 == null) {
              a4 = new SpecificData.Array<nlmk.l3.ccm.pgp.RecordMetallographic>((int)size4, SCHEMA$.getField("metallographic").schema().getTypes().get(1));
              this.metallographic = a4;
            } else a4.clear();
            SpecificData.Array<nlmk.l3.ccm.pgp.RecordMetallographic> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<nlmk.l3.ccm.pgp.RecordMetallographic>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                nlmk.l3.ccm.pgp.RecordMetallographic e4 = (ga4 != null ? ga4.peek() : null);
                if (e4 == null) {
                  e4 = new nlmk.l3.ccm.pgp.RecordMetallographic();
                }
                e4.customDecode(in);
                a4.add(e4);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










